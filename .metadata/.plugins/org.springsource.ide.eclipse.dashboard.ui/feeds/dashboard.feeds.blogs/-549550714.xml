<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Spring</title>
  <link rel="alternate" href="https://spring.io/blog" />
  <link rel="self" href="https://spring.io/blog.atom" />
  <id>http://spring.io/blog.atom</id>
  <icon>https://spring.io/favicon.ico</icon>
  <updated>2015-07-14T17:43:04Z</updated>
  <entry>
    <title>This Week in Spring - July 14th 2015</title>
    <link rel="alternate" href="https://spring.io/blog/2015/07/14/this-week-in-spring-july-14th-2015" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2015-07-14:2189</id>
    <updated>2015-07-14T17:43:04Z</updated>
    <content type="html">&lt;p&gt;Welcome to another installment of &lt;em&gt;This Week in Spring!&lt;/em&gt;&lt;/p&gt;&lt;p&gt;This week in I&amp;rsquo;m in Shanghai, China and Hangzhou, China and Shenzhen, China, talking to some of the world&amp;rsquo;s largest websites (of the same scale of Netflix!) about their use of Spring Boot and Spring Cloud. (More on that later!)&lt;/p&gt;&lt;p&gt;Anyway, without further ado..&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Paul Chapman put together a nice walkthrough Spring Cloud today. &lt;a href="https://spring.io/blog/2015/07/14/microservices-with-spring"&gt;Way to go Paul&lt;/a&gt;!&lt;/li&gt;
  &lt;li&gt;Andy Wilkinson just &lt;a href="https://spring.io/blog/2015/07/13/spring-io-platform-1-1-3-released"&gt;announced the Spring IO Platform BOM 1.1.3 has been released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2015/07/10/spring-boot-1-3-0-m2-available-now"&gt;Spring Boot 1.3M2&lt;/a&gt; - along with new support for JOOQ, &lt;code&gt;/flyway&lt;/code&gt; and &lt;code&gt;/liquibase&lt;/code&gt; Actuator endpoints, ANSI colored &lt;code&gt;banner.txt&lt;/code&gt;, and Apache Artemis integration (among &lt;em&gt;many&lt;/em&gt; other things) is now available! Check it out.&lt;/li&gt;
  &lt;li&gt;If you missed Spring rockstar and Spring Boot ninja Greg Turnquist&amp;rsquo;s talk on debugging and maintaing Spring Boot applications (why would you miss it??), &lt;a href="https://spring.io/blog/2015/07/09/webinar-replay-debug-and-maintain-your-spring-boot-app"&gt;then check it out&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;This is a nice &lt;a href="https://dzone.com/articles/using-the-h2-database-console-in-spring-boot-with"&gt;post on using Spring Boot with the H2 database console&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I only just noticed DZone has a refcard &lt;a href="https://dzone.com/refcardz/cloud-foundry"&gt;on Cloud Foundry which seems like a worthy read&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;this is a great (Chinese-language) post on what Spring Boot is and how it works. I&amp;rsquo;ve asked a &lt;a href="http://twitter.com/resouer"&gt;friend&lt;/a&gt; and he - a native Mandarin Chinese speaker - insists it&amp;rsquo;s a good read. Enjoy!&lt;/li&gt;
  &lt;li&gt;check out this &lt;a href="http://wanderbishty.blogspot.in/2015/07/spring-boot-using-boot-for-your.html"&gt;jumpstart into Spring Boot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;our pal &lt;a href="http://twitter.com/making"&gt;@making&lt;/a&gt; is at it again, this time with a nice look at &lt;a href="https://blog.ik.am/#/entries/349"&gt;the upcoming Spring Boot 1.3&amp;rsquo;s DevTools integration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;the &lt;em&gt;Codes and Notes&lt;/em&gt; blog has a nice post on &lt;a href="http://www.codesandnotes.be/2015/07/12/angularjs-web-apps-for-spring-based-rest-services-security-the-server-side-part-1/"&gt;using AngularJS web apps for Spring-based REST services&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>Microservices with Spring</title>
    <link rel="alternate" href="https://spring.io/blog/2015/07/14/microservices-with-spring" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Paul Chapman</name>
    </author>
    <id>tag:spring.io,2015-07-02:2181</id>
    <updated>2015-07-14T06:28:00Z</updated>
    <content type="html">&lt;h1&gt;&lt;a href="#introduction" class="anchor" name="introduction"&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;A simple example of setting up a microservices system using Spring, Spring Boot and Spring Cloud.&lt;/p&gt;&lt;p&gt;&lt;a href="http://martinfowler.com/articles/microservices.html"&gt;Microservices&lt;/a&gt; allow large systems to be built up from a number of collaborating components. It does at the process level what Spring has always done at the component level: loosely coupled processes instead of loosely coupled components.&lt;/p&gt;&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/paulc4/microservices-demo/master/shopping-system.jpg"&gt;&lt;img src="https://raw.githubusercontent.com/paulc4/microservices-demo/master/shopping-system.jpg" title="Click to enlarge" alt="Shopping Application" style="width: 400px; float: right; margin: 0px 5px 5px 10px"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;For example imagine an online shop with separate microservices for user-accounts, product-catalog order-processing and shopping carts:&lt;/p&gt;&lt;p&gt;Inevitably there are a number of moving parts that you have to setup and configure to build such a system. How to get them working together is not obvious - you need to have good familiarity with Spring Boot since Spring Cloud leverages it heavily, several Netflix or other OSS projects are required and, of course, there is some Spring configuration &amp;ldquo;magic&amp;rdquo;!&lt;/p&gt;&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/paulc4/microservices-demo/master/mini-system.jpg"&gt;&lt;img src="https://raw.githubusercontent.com/paulc4/microservices-demo/master/mini-system.jpg" title="Click to enlarge" alt="Demo Application" style="width: 400px; float: left; margin: 5px 10px 5px 0" /&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;In this article I aim to clarify how things work by building the simplest possible system step-by-step. Therefore, I will only implement a small part of the big system - the user account service.&lt;/p&gt;&lt;p&gt;The &lt;em&gt;Web-Application&lt;/em&gt; will make requests to the &lt;em&gt;Account-Service&lt;/em&gt; microservice using a RESTful API. We will also need to add a &lt;em&gt;discovery&lt;/em&gt; service &amp;ndash; so the other processes can find each other.&lt;/p&gt;&lt;p&gt;The code for this application is here: &lt;a href="https://github.com/paulc4/microservices-demo"&gt;https://github.com/paulc4/microservices-demo&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a href="#follow-up-1-other-resources" class="anchor" name="follow-up-1-other-resources"&gt;&lt;/a&gt;Follow-Up 1: Other Resources&lt;/h2&gt;&lt;p&gt;This article only discusses a minimal system. For more information, you might like to read Josh Long&amp;rsquo;s blog article &lt;a href="https://spring.io/blog/2015/01/20/microservice-registration-and-discovery-with-spring-cloud-and-netflix-s-eureka"&gt;Microservice Registration and Discovery with Spring Cloud and Netflix&amp;rsquo;s Eureka&lt;/a&gt; which shows running a complete microservice system on Cloud Foundry.&lt;/p&gt;&lt;p&gt;The Spring Cloud projects are &lt;a href="http://projects.spring.io/spring-cloud/"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a href="#follow-up-2-springone-2gx-2015" class="anchor" name="follow-up-2-springone-2gx-2015"&gt;&lt;/a&gt;Follow Up 2: SpringOne 2GX 2015&lt;/h2&gt;&lt;p&gt;Book your place at &lt;a href="http://www.springone2gx.com"&gt;SpringOne2GX in Washington, DC soon&lt;/a&gt; - simply the best opportunity to find out first hand all that&amp;rsquo;s going on and to provide direct feedback. There will be an entire track on Spring Cloud and Cloud Native applications.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;em&gt;OK, let&amp;rsquo;s get started &amp;hellip;&lt;/em&gt;&lt;/p&gt;&lt;h1&gt;&lt;a href="#service-registration" class="anchor" name="service-registration"&gt;&lt;/a&gt;Service Registration&lt;/h1&gt;&lt;p&gt;When you have multiple processes working together they need to find each other. If you have ever used Java&amp;rsquo;s RMI mechanism you may recall that it relied on a central registry so that RMI processes could find each other. Microservices has the same requirement.&lt;/p&gt;&lt;p&gt;The developers at Netflix had this problem when building their systems and created a registration server called Eureka (&amp;ldquo;I have found it&amp;rdquo; in Greek). Fortunately for us, they made their discovery server open-source and Spring has incorporated into Spring Cloud, making it even easier to run up a Eureka server. Here is the &lt;em&gt;complete&lt;/em&gt; application:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@SpringBootApplication&#xD;
@EnableEurekaServer&#xD;
public class ServiceRegistrationServer {&#xD;
&#xD;
  public static void main(String[] args) {&#xD;
    // Tell Boot to look for registration-server.yml&#xD;
    System.setProperty(&amp;quot;spring.config.name&amp;quot;, &amp;quot;registration-server&amp;quot;);&#xD;
    SpringApplication.run(ServiceRegistrationServer.class, args);&#xD;
  }&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It really is that simple!&lt;/p&gt;&lt;p&gt;Spring Cloud is built on Spring Boot and utilizes parent and starter POMs. The important parts of the &lt;a href="https://github.com/paulc4/microservices-demo/blob/master/pom.xml"&gt;POM&lt;/a&gt; are:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint xml"&gt;    &amp;lt;parent&amp;gt;&#xD;
        &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
        &amp;lt;artifactId&amp;gt;spring-cloud-starter-parent&amp;lt;/artifactId&amp;gt;&#xD;
        &amp;lt;version&amp;gt;Angel.SR3&amp;lt;/version&amp;gt;  &amp;lt;!-- Name of release train --&amp;gt;&#xD;
    &amp;lt;/parent&amp;gt;&#xD;
    &amp;lt;dependencies&amp;gt;&#xD;
        &amp;lt;dependency&amp;gt;&#xD;
            &amp;lt;!-- Setup Spring Boot --&amp;gt;&#xD;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&#xD;
            &amp;lt;artifactId&amp;gt;spring-boot-starter&amp;lt;/artifactId&amp;gt;&#xD;
        &amp;lt;/dependency&amp;gt;&#xD;
&#xD;
        &amp;lt;dependency&amp;gt;&#xD;
            &amp;lt;!-- Setup Spring MVC &amp;amp; REST, use Embedded Tomcat --&amp;gt;&#xD;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&#xD;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;&#xD;
        &amp;lt;/dependency&amp;gt;&#xD;
&#xD;
        &amp;lt;dependency&amp;gt;&#xD;
            &amp;lt;!-- Spring Cloud starter --&amp;gt;&#xD;
            &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
            &amp;lt;artifactId&amp;gt;spring-cloud-starter&amp;lt;/artifactId&amp;gt;&#xD;
        &amp;lt;/dependency&amp;gt;&#xD;
&#xD;
        &amp;lt;dependency&amp;gt;&#xD;
            &amp;lt;!-- Eureka for service registration --&amp;gt;&#xD;
            &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
            &amp;lt;artifactId&amp;gt;spring-cloud-starter-eureka-server&amp;lt;/artifactId&amp;gt;&#xD;
        &amp;lt;/dependency&amp;gt;&#xD;
    &amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- Right floating Info-block --&gt;
&lt;style&gt;&#xD;
.infoblock {&#xD;
border: 1px solid #AAF;&#xD;
    background-color: white;&#xD;
    color: #303030;&#xD;
    margin: 0 0 0 0.5em;&#xD;
    padding: 0.5em 0 0.5em 1em;&#xD;
    float: right;&#xD;
    font-size: 88%;&#xD;
    width: 45%&#xD;
}&#xD;
&lt;/style&gt;
&lt;div class="infoblock"&gt;&#xD;
&lt;p style="margin: 0 0 0 0;"&gt;&#xD;
&lt;b&gt;Note: &lt;/b&gt;Angel.SR3 is the current "release train" - a set of co-ordinated releases -- see note on Spring Cloud &lt;a href="http://projects.spring.io/spring-cloud"&gt;home page&lt;/a&gt; (scroll down to second section).&#xD;
&lt;/p&gt;&#xD;
&lt;/div&gt;&lt;p&gt;By default Spring Boot applications look for an &lt;code&gt;application.properties&lt;/code&gt; or &lt;code&gt;application.yml&lt;/code&gt; file for configuration. By setting the &lt;code&gt;spring.config.name&lt;/code&gt; property we can tell Spring Boot to look for a different file - useful if you have multiple Spring Boot applications in the same project - as I will do shortly.&lt;/p&gt;&lt;p&gt;This application looks for &lt;code&gt;registration-server.properties&lt;/code&gt; or &lt;code&gt;registration-server.yml&lt;/code&gt;. Here is the relevant configuration from &lt;code&gt;registration-server.yml&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint yml"&gt;# Configure this Discovery Server&#xD;
eureka:&#xD;
  instance:&#xD;
    hostname: localhost&#xD;
  client:  # Not a client, don&amp;#39;t register with yourself&#xD;
    registerWithEureka: false&#xD;
    fetchRegistry: false&#xD;
&#xD;
server:&#xD;
  port: 1111   # HTTP (Tomcat) port
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;By default Eureka runs on port 8761, but here we will use port &lt;code&gt;1111&lt;/code&gt; instead. Also by including the registration code in my process I might be a server or a client. The configuration specifies that I am not a client and stops the server process trying to register with itself.&lt;/p&gt;
&lt;!-- Floating Infoblock --&gt;
&lt;div class="infoblock"&gt;&#xD;
&lt;h2 style="margin: 10px 0 15px -1em"&gt;Using Consul&lt;/h2&gt;&#xD;
&lt;p style="margin-bottom: 10px"&gt;&#xD;
Spring Cloud also supports &lt;a href="https://www.consul.io"&gt;Consul&lt;/a&gt; as an alternative to Eureka.  You start the Consul Agent (its registration server) using a script and then clients use it to find their microservices.  For details, see this blog &lt;a href="https://spring.io/blog/2015/05/27/spring-cloud-consul-1-0-0-m1-available-now"&gt;article&lt;/a&gt; or project &lt;a href="http://cloud.spring.io/spring-cloud-consul"&gt;home page&lt;/a&gt;.&#xD;
&lt;/p&gt;&#xD;
&lt;/div&gt;&lt;p&gt;Try running the &lt;em&gt;RegistrationServer&lt;/em&gt; now (see &lt;a href="#running-the-system"&gt;below&lt;/a&gt; for help on running the application). You can open the Eureka dashboard here: &lt;a href="http://localhost:1111"&gt;http://localhost:1111&lt;/a&gt; and the section showing Applications will be empty.&lt;/p&gt;&lt;p&gt;From now on we will refer to the &lt;em&gt;discovery-server&lt;/em&gt; since it could be Eureka or Consul (see side panel).&lt;/p&gt;&lt;h1&gt;&lt;a href="#creating-a-microservice-em-account-service-em" class="anchor" name="creating-a-microservice-em-account-service-em"&gt;&lt;/a&gt;Creating a Microservice: &lt;em&gt;Account-Service&lt;/em&gt;&lt;/h1&gt;&lt;p&gt;A microservice is a stand-alone process that handles a well-defined requirement. &lt;/p&gt;&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/paulc4/microservices-demo/master/beans-vs-processes.jpg"&gt;&lt;img src="https://raw.githubusercontent.com/paulc4/microservices-demo/master/beans-vs-processes.jpg" title="Click to enlarge" alt="Beans vs Processes" style="width: 400px; float: right; margin: 10px 0 5px 15px"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;When configuring applications with Spring we emphasize Loose Coupling and Tight Cohesion, These are not new concepts (Larry Constantine is credited with first defining these in the late 1960s - &lt;a href="https://en.wikipedia.org/wiki/Cohesion_%28computer_science%29"&gt;reference&lt;/a&gt;) but now we are applying them, not to interacting components (Spring Beans), but to interacting processes.&lt;/p&gt;&lt;p&gt;In this example, I have a simple Account management microservice that uses Spring Data to implement a JPA &lt;code&gt;AccountRepository&lt;/code&gt; and Spring REST to provide a RESTful interface to account information. In most respects this is a straightforward Spring Boot application.&lt;/p&gt;&lt;p&gt;What makes it special is that it registers itself with the &lt;em&gt;discovery-server&lt;/em&gt; at start-up. Here is the Spring Boot startup class:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@EnableAutoConfiguration&#xD;
@EnableDiscoveryClient&#xD;
@Import(AccountsWebApplication.class)&#xD;
public class AccountsServer {&#xD;
&#xD;
    @Autowired&#xD;
    AccountRepository accountRepository;&#xD;
&#xD;
    public static void main(String[] args) {&#xD;
        // Will configure using accounts-server.yml&#xD;
        System.setProperty(&amp;quot;spring.config.name&amp;quot;, &amp;quot;accounts-server&amp;quot;);&#xD;
&#xD;
        SpringApplication.run(AccountsServer.class, args);&#xD;
    }&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The annotations do the work:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code&gt;@EnableAutoConfiguration&lt;/code&gt; - defines this as a Spring Boot application.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;@EnableDiscoveryClient&lt;/code&gt; - this enables service registration and discovery. In this case, this process registers itself with the &lt;em&gt;discovery-server&lt;/em&gt; service using its application name (see below).&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;@Import(AccountsWebApplication.class)&lt;/code&gt; - this Java Configuration class sets up everything else (see &lt;a href="#accountswebapplication-configuration"&gt;below&lt;/a&gt; for more details).&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;What makes this a microservice is the registration with the &lt;em&gt;discovery-server&lt;/em&gt; via &lt;code&gt;@EnableDiscoveryClient&lt;/code&gt; and its YML configuration completes the setup:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint yml"&gt;# Spring properties&#xD;
spring:&#xD;
  application:&#xD;
     name: accounts-service&#xD;
&#xD;
# Discovery Server Access&#xD;
eureka:&#xD;
  client:&#xD;
    serviceUrl:&#xD;
      defaultZone: http://localhost:1111/eureka/&#xD;
&#xD;
# HTTP Server&#xD;
server:&#xD;
  port: 2222   # HTTP (Tomcat) port
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note that this file&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Sets the application name as &lt;code&gt;accounts-service&lt;/code&gt;. This service registers under this name and can also be accessed by this name - see below.&lt;/li&gt;
  &lt;li&gt;Specifies a custom port to listen on (2222). All my processes are using Tomcat, they can&amp;rsquo;t all listen on port 8080.&lt;/li&gt;
  &lt;li&gt;The URL of the Eureka Service process - from the previous section.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/paulc4/microservices-demo/master/dashboard.png"&gt;&lt;img src="https://raw.githubusercontent.com/paulc4/microservices-demo/master/dashboard.png" title="Click to enlarge" alt="Eureka Dashboard" style="width: 450px; float: right; margin: 0px 5px 5px 10px"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Run the &lt;em&gt;AccountsService&lt;/em&gt; application now and let it finish initializing. Refresh the dashboard &lt;a href="http://localhost:1111"&gt;http://localhost:1111&lt;/a&gt; and you should see the ACCOUNTS-SERVICE listed under Applications. Sometimes registration can take 10-20 seconds so be patient - check the log output from &lt;em&gt;RegistrationService&lt;/em&gt;&lt;/p&gt;
&lt;!-- Floating Infoblock --&gt;
&lt;div class="infoblock"&gt;&#xD;
&lt;p style="margin: 0 0 0 0;"&gt;&#xD;
&lt;b&gt;Warning: &lt;/b&gt;Do not try to display XML output using the internal web-viewer of Eclipse/STS because it cannot do so.  Use your favorite web browser instead.&#xD;
&lt;/p&gt;&#xD;
&lt;/div&gt;&lt;p&gt;For more detail, go here: &lt;a href="http://localhost:1111/eureka/apps/"&gt;http://localhost:1111/eureka/apps/&lt;/a&gt; and you should see something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint xml"&gt;&amp;lt;applications&amp;gt;&#xD;
    &amp;lt;versions__delta&amp;gt;1&amp;lt;/versions__delta&amp;gt;&#xD;
    &amp;lt;apps__hashcode&amp;gt;UP_1_&amp;lt;/apps__hashcode&amp;gt;&#xD;
    &amp;lt;application&amp;gt;&#xD;
        &amp;lt;name&amp;gt;ACCOUNTS-SERVICE&amp;lt;/name&amp;gt;&#xD;
        &amp;lt;instance&amp;gt;&#xD;
            &amp;lt;hostName&amp;gt;autgchapmp1m1.corp.emc.com&amp;lt;/hostName&amp;gt;&#xD;
            &amp;lt;app&amp;gt;ACCOUNTS-SERVICE&amp;lt;/app&amp;gt;&#xD;
            &amp;lt;ipAddr&amp;gt;172.16.84.1&amp;lt;/ipAddr&amp;gt;&amp;lt;status&amp;gt;UP&amp;lt;/status&amp;gt;&#xD;
            &amp;lt;overriddenstatus&amp;gt;UNKNOWN&amp;lt;/overriddenstatus&amp;gt;&#xD;
            &amp;lt;port enabled=&amp;quot;true&amp;quot;&amp;gt;3344&amp;lt;/port&amp;gt;&#xD;
            &amp;lt;securePort enabled=&amp;quot;false&amp;quot;&amp;gt;443&amp;lt;/securePort&amp;gt;&#xD;
            ...&#xD;
        &amp;lt;/instance&amp;gt;&#xD;
    &amp;lt;/application&amp;gt;&#xD;
&amp;lt;/applications&amp;gt;&#xD;

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Alternatively go to &lt;a href="http://localhost:1111/eureka/apps/ACCOUNTS-SERVICE"&gt;http://localhost:1111/eureka/apps/ACCOUNTS-SERVICE&lt;/a&gt; and see just the details for &lt;em&gt;AccountsService&lt;/em&gt; - if it&amp;rsquo;s not registered you will get a 404. &lt;/p&gt;&lt;h1&gt;&lt;a href="#accessing-the-microservice-em-web-service-em" class="anchor" name="accessing-the-microservice-em-web-service-em"&gt;&lt;/a&gt;Accessing the Microservice: &lt;em&gt;Web-Service&lt;/em&gt;&lt;/h1&gt;&lt;p&gt;To consume a RESTful service, Spring provides the &lt;code&gt;RestTemplate&lt;/code&gt; class. This allows you to send HTTP requests to a RESTful server and fetch data in a number of formats - such as JSON and XML.&lt;/p&gt;
&lt;!-- Floating Infoblock --&gt;
&lt;div class="infoblock" style="width: 50%"&gt;&#xD;
&lt;p style="margin: 0 0 0 0"&gt;&#xD;
&lt;b&gt;Note: &lt;/b&gt;The Accounts microservice provides a RESTful interface over HTTP, but any suitable protocol could be used. Messaging using &lt;a href="http://rabbitmq.docs.pivotal.io"&gt;AMQP&lt;/a&gt; or JMS is an obvious alternative.&#xD;
&lt;/p&gt;&#xD;
&lt;/div&gt;&lt;p&gt;Which formats can be used depends on the presence of marshaling classes on the classpath - for example JAXB is always detected since it is a standard part of Java. JSON is supported if Jackson jars are present in the classpath.&lt;/p&gt;&lt;p&gt;A microservice (discovery) client can use a &lt;code&gt;RestTemplate&lt;/code&gt; and Spring will automatically configure it to be microservice aware (more of this in a moment).&lt;/p&gt;&lt;h2&gt;&lt;a href="#encapsulating-microservice-access" class="anchor" name="encapsulating-microservice-access"&gt;&lt;/a&gt;Encapsulating Microservice Access&lt;/h2&gt;&lt;p&gt;Here is part of the &lt;code&gt;WebAccountService&lt;/code&gt; for my &lt;em&gt;client&lt;/em&gt; application:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@Service&#xD;
public class WebAccountsService {&#xD;
&#xD;
    @Autowired        // Created automatically by Spring Cloud&#xD;
    @LoadBalanced&#xD;
    protected RestTemplate restTemplate; &#xD;
&#xD;
    protected String serviceUrl;&#xD;
&#xD;
    public WebAccountsService(String serviceUrl) {&#xD;
        this.serviceUrl = serviceUrl.startsWith(&amp;quot;http&amp;quot;) ?&#xD;
               serviceUrl : &amp;quot;http://&amp;quot; + serviceUrl;&#xD;
    }&#xD;
&#xD;
    public Account getByNumber(String accountNumber) {&#xD;
        Account account = restTemplate.getForObject(serviceUrl&#xD;
                + &amp;quot;/acounts/{number}&amp;quot;, Account.class, accountNumber);&#xD;
&#xD;
        if (account == null)&#xD;
            throw new AccountNotFoundException(accountNumber);&#xD;
        else&#xD;
            return account;&#xD;
    }&#xD;
    ...&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note that my &lt;code&gt;WebAccountService&lt;/code&gt; is just a wrapper for the RestTemplate fetching data from the microservice. The interesting parts are the &lt;code&gt;serviceUrl&lt;/code&gt; and the &lt;code&gt;RestTemplate&lt;/code&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a href="#accessing-the-microservice" class="anchor" name="accessing-the-microservice"&gt;&lt;/a&gt;Accessing the Microservice&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;serviceUrl&lt;/code&gt; is provided by the main program to the &lt;code&gt;WebAccountController&lt;/code&gt; which in turn passes it to the &lt;code&gt;WebAccountService&lt;/code&gt; (as shown above):&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@SpringBootApplication&#xD;
@EnableDiscoveryClient&#xD;
@ComponentScan(useDefaultFilters=false)  // Disable component scanner&#xD;
public class WebServer {&#xD;
&#xD;
    public static void main(String[] args) {&#xD;
        // Will configure using web-server.yml&#xD;
        System.setProperty(&amp;quot;spring.config.name&amp;quot;, &amp;quot;web-server&amp;quot;);&#xD;
        SpringApplication.run(WebServer.class, args);&#xD;
    }&#xD;
&#xD;
    @Bean&#xD;
    public WebAccountsController accountsController() {&#xD;
         // 1. Value should not be hard-coded, just to keep things simple&#xD;
         //        in this example.&#xD;
         // 2. Case insensitive: could also use: http://accounts-service&#xD;
         return new WebAccountsController&#xD;
                       (&amp;quot;http://ACCOUNTS-SERVICE&amp;quot;);  // serviceUrl&#xD;
    }&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A few points to note:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The &lt;code&gt;WebController&lt;/code&gt; is a typical Spring MVC view-based controller returning HTML. The application uses Thymeleaf as the view-technology (for generating dynamic HTML)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;WebServer&lt;/code&gt; is also a &lt;code&gt;@EnableDiscoveryClient&lt;/code&gt; but in this case as well as registering itself with the &lt;em&gt;discovery-server&lt;/em&gt; (which is not necessary since it offers no services of its own) it uses Eureka to locate the account service.&lt;/li&gt;
  &lt;li&gt;The default component-scanner setup inherited from Spring Boot looks for &lt;code&gt;@Component&lt;/code&gt; classes and, in this case, finds my &lt;code&gt;WebAccountController&lt;/code&gt; and tries to create it. However, I want to create it myself, so I disable the scanner like this &lt;code&gt;@ComponentScan(useDefaultFilters=false)&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The &lt;em&gt;service-url&lt;/em&gt; I am passing to the &lt;code&gt;WebAccountController&lt;/code&gt; is the name the service used to register itself with the &lt;em&gt;discovery-server&lt;/em&gt; - by default this is the same as the &lt;code&gt;spring.application.name&lt;/code&gt; for the process which is &lt;code&gt;account-service&lt;/code&gt; - see &lt;code&gt;account-service.yml&lt;/code&gt; above. The use of upper-case is not required but it does help emphasize that &lt;em&gt;ACCOUNTS-SERVICE&lt;/em&gt; is a logical host (that will be obtained via discovery) not an actual host.&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;&lt;a href="#load-balanced-resttemplate" class="anchor" name="load-balanced-resttemplate"&gt;&lt;/a&gt;Load Balanced RestTemplate&lt;/h2&gt;&lt;p&gt;The RestTemplate has been auto-configured by Spring Cloud to use a custom &lt;code&gt;HttpRequestClient&lt;/code&gt; that uses Netflix &lt;a href="http://techblog.netflix.com/2013/01/announcing-ribbon-tying-netflix-mid.html"&gt;Ribbon&lt;/a&gt; to do the micro-service lookup. Ribbon is also load-balancer so if you have multiple instances of a service available, it picks one for you. (Neither Eureka nor Consul on their own perform load-balancing so we use Ribbon to do it instead).&lt;/p&gt;&lt;p&gt;If you look in the &lt;a href="https://github.com/spring-cloud/spring-cloud-netflix/blob/master/spring-cloud-netflix-core/src/main/java/org/springframework/cloud/netflix/ribbon/RibbonClientHttpRequestFactory.java"&gt;RibbonClientHttpRequestFactory&lt;/a&gt; you will see this code:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;    String serviceId = originalUri.getHost();&#xD;
    ServiceInstance instance =&#xD;
             loadBalancer.choose(serviceId);  // loadBalancer uses Ribbon&#xD;
    ... if instance non-null (service exists) ...&#xD;
    URI uri = loadBalancer.reconstructURI(instance, originalUri);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;loadBalancer&lt;/code&gt; takes the logical service-name (as registered with the &lt;em&gt;discovery-server&lt;/em&gt;) and converts it to the actual hostname of the chosen microservice.&lt;/p&gt;&lt;p&gt;A &lt;code&gt;RestTemplate&lt;/code&gt; instance is thread-safe and can be used to access any number of services in different parts of your application (for example, I might have a &lt;code&gt;CustomerService&lt;/code&gt; wrapping the same &lt;code&gt;RestTemplate&lt;/code&gt; instance accessing a customer data microservice).&lt;/p&gt;&lt;h2&gt;&lt;a href="#configuration" class="anchor" name="configuration"&gt;&lt;/a&gt;Configuration&lt;/h2&gt;&lt;p&gt;Below the relevant configuration from &lt;code&gt;web-server.yml&lt;/code&gt;. It is used to:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Set the application name&lt;/li&gt;
  &lt;li&gt;Define the URL for accessing the discovery server&lt;/li&gt;
  &lt;li&gt;Set the Tomcat port to 3333&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="prettyprint yml"&gt;# Spring Properties&#xD;
spring:&#xD;
  application:&#xD;
     name: web-service&#xD;
&#xD;
# Discovery Server Access&#xD;
eureka:&#xD;
  client:&#xD;
    serviceUrl:&#xD;
      defaultZone: http://localhost:1111/eureka/&#xD;
&#xD;
# HTTP Server&#xD;
server:&#xD;
  port: 3333   # HTTP (Tomcat) port
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a name="running-the-system"/&gt;&lt;/p&gt;&lt;h1&gt;&lt;a href="#how-to-run-the-demo" class="anchor" name="how-to-run-the-demo"&gt;&lt;/a&gt;How to Run the Demo&lt;/h1&gt;&lt;p&gt;A small demo of this system is at &lt;a href="http://github.com/paulc4/microservices-demo"&gt;http://github.com/paulc4/microservices-demo&lt;/a&gt;. Clone it and either load into your favorite IDE or use maven directly. Suggestions on how to run the demo are included in the &lt;a href="https://github.com/paulc4/microservices-demo/blob/master/README.md"&gt;README&lt;/a&gt; on the project homepage.&lt;/p&gt;
&lt;hr style="height:6px"/&gt;&lt;h1&gt;&lt;a href="#extra-notes" class="anchor" name="extra-notes"&gt;&lt;/a&gt;Extra Notes&lt;/h1&gt;&lt;p&gt;Some notes about Spring Boot usage by these applications. If you are not familiar with Spring Boot, this explains some of the &amp;ldquo;magic&amp;rdquo;!&lt;/p&gt;&lt;h2&gt;&lt;a href="#view-templating-engines" class="anchor" name="view-templating-engines"&gt;&lt;/a&gt;View Templating Engines&lt;/h2&gt;&lt;p&gt;The Eureka dashboard (inside &lt;code&gt;RegistrationServer&lt;/code&gt;) is implemented using FreeMarker templates but the other two applications use Thymeleaf. To make sure each uses the right view engine, there is extra configuration in each YML file.&lt;/p&gt;&lt;p&gt;This is at the end of &lt;code&gt;registration-server.yml&lt;/code&gt; to disable Thymeleaf.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint yml"&gt;...&#xD;
# Discovery Server Dashboard uses FreeMarker.  Don&amp;#39;t want Thymeleaf templates&#xD;
spring:&#xD;
  thymeleaf:&#xD;
    enabled: false     # Disable Thymeleaf spring:
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Since both &lt;code&gt;AccountService&lt;/code&gt; and &lt;code&gt;WebService&lt;/code&gt; use thymeleaf, we also need to point each at their own templates. Here is part of &lt;code&gt;account-server.yml&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint yml"&gt;# Spring properties&#xD;
spring:&#xD;
  application:&#xD;
     name: accounts-service  # Service registers under this name&#xD;
  freemarker:&#xD;
    enabled: false      # Ignore Eureka dashboard FreeMarker templates&#xD;
  thymeleaf:&#xD;
    cache: false        # Allow Thymeleaf templates to be reloaded at runtime&#xD;
    prefix: classpath:/accounts-server/templates/&#xD;
                        # Template location for this application only&#xD;
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;web-server.yml&lt;/code&gt; is similar but its templates are defined by&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint yml"&gt;   prefix: classpath:/web-server/templates/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note the / on the end of each &lt;code&gt;spring.thymeleaf.prefix&lt;/code&gt; classpath - this is &lt;em&gt;crucial&lt;/em&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a href="#command-line-execution" class="anchor" name="command-line-execution"&gt;&lt;/a&gt;Command-Line Execution&lt;/h2&gt;&lt;p&gt;The jar is compiled to automatically run &lt;code&gt;io.pivotal.microservices.services.Main&lt;/code&gt; when invoked from the command-line - see &lt;a href="https://github.com/paulc4/microservices-demo/blob/master/src/main/java/io/pivotal/microservices/services/Main.java"&gt;Main.java&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The Spring Boot option to set the &lt;code&gt;start-class&lt;/code&gt; can be seen in the &lt;a href="https://github.com/paulc4/microservices-demo/blob/master/pom.xml"&gt;POM&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint xml"&gt;    &amp;lt;properties&amp;gt;&#xD;
        &amp;lt;!-- Stand-alone RESTFul application for testing only --&amp;gt;&#xD;
        &amp;lt;start-class&amp;gt;io.pivotal.microservices.services.Main&amp;lt;/start-class&amp;gt;&#xD;
    &amp;lt;/properties&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a href="#accountswebapplication-configuration" class="anchor" name="accountswebapplication-configuration"&gt;&lt;/a&gt;AccountsWebApplication Configuration&lt;/h2&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@SpringBootApplication&#xD;
@EntityScan(&amp;quot;io.pivotal.microservices.accounts&amp;quot;)&#xD;
@EnableJpaRepositories(&amp;quot;io.pivotal.microservices.accounts&amp;quot;)&#xD;
@PropertySource(&amp;quot;classpath:db-config.properties&amp;quot;)&#xD;
public class AccountsWebApplication {&#xD;
...&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is the main configuration class for AccountService and is a classic Spring Boot application using Spring Data. The annotations do most of the work:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code&gt;@SpringBootApplication&lt;/code&gt; - defines this as a Spring Boot application. This convenient annotation combines &lt;code&gt;@EnableAutoConfiguration&lt;/code&gt;, &lt;code&gt;@Configuration&lt;/code&gt; and &lt;code&gt;@ComponentScan&lt;/code&gt; (which, by default, causes Spring to search the package containing this class, and its sub-packages, for components - potential Spring Beans: &lt;code&gt;AccountController&lt;/code&gt; and &lt;code&gt;AccountRepository&lt;/code&gt;) .&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;@EntityScan(&amp;quot;io.pivotal.microservices.accounts&amp;quot;)&lt;/code&gt; - because I am using JPA, I need to specify where the &lt;code&gt;@Entity&lt;/code&gt; classes are. Normally this is an option you specify in JPA&amp;rsquo;s &lt;code&gt;persistence.xml&lt;/code&gt; or when creating a &lt;code&gt;LocalContainerEntityManagerFactoryBean&lt;/code&gt;. Spring Boot will create this factory-bean for me because the &lt;code&gt;spring-boot-starter-data-jpa&lt;/code&gt; dependency is on the class path. So an alternative way of specifying where to find the &lt;code&gt;@Entity&lt;/code&gt; classes is by using&lt;code&gt;@EntityScan&lt;/code&gt;. This will find &lt;code&gt;Account&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;@EnableJpaRepositories(&amp;quot;io.pivotal.microservices.accounts&amp;quot;)&lt;/code&gt;- look for classes extending Spring Data&amp;rsquo;s &lt;code&gt;Repository&lt;/code&gt; marker interface and automatically implement them using JPA - see &lt;a href="http://projects.spring.io/spring-data-jpa"&gt;Spring Data JPA&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;@PropertySource(&amp;quot;classpath:db-config.properties&amp;quot;)&lt;/code&gt; - properties to configure my &lt;code&gt;DataSource&lt;/code&gt; &amp;ndash; see &lt;a href="https://github.com/paulc4/microservices-demo/blob/master/src/main/resources/db-config.properties"&gt;db-config.properties&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Note that the &lt;em&gt;AccountsWebApplication&lt;/em&gt; can be run as a stand-alone application in its own right which I found useful for testing. It listens to the default Tomcat port: 8080, so the home page is &lt;a href="http://localhost:8080"&gt;http://localhost:8080&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a href="#configuring-properties" class="anchor" name="configuring-properties"&gt;&lt;/a&gt;Configuring Properties&lt;/h2&gt;&lt;p&gt;As mentioned above, Spring Boot applications look for either &lt;code&gt;application.properties&lt;/code&gt; or &lt;code&gt;application.yml&lt;/code&gt; to configure themselves. Since all three servers used in this application are in the same project, they would automatically use the same configuration.&lt;/p&gt;&lt;p&gt;To avoid that, each specifies an alternative file by setting the &lt;code&gt;spring.config.name&lt;/code&gt; property.&lt;/p&gt;&lt;p&gt;For example here is part of &lt;code&gt;WebServer.java&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;public static void main(String[] args) {&#xD;
  // Tell server to look for web-server.properties or web-server.yml&#xD;
  System.setProperty(&amp;quot;spring.config.name&amp;quot;, &amp;quot;web-server&amp;quot;);&#xD;
  SpringApplication.run(WebServer.class, args);&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;At runtime, the application will find and use &lt;code&gt;web-server.yml&lt;/code&gt; in &lt;code&gt;src/main/resources&lt;/code&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a href="#logging" class="anchor" name="logging"&gt;&lt;/a&gt;Logging&lt;/h2&gt;&lt;p&gt;Spring Boot sets up INFO level logging for Spring by default. Since we need to examine the logs for evidence of our microservices working, I have raised the level to WARN to reduce the amount of logging.&lt;/p&gt;&lt;p&gt;To do this, the logging level would need to be specified in each of the &lt;code&gt;xxxx-server.yml&lt;/code&gt; configuration files. This is usually the best place to define them as logging properties &lt;em&gt;cannot&lt;/em&gt; be specified in property files (logging has already been initialized before @PropertySource directives are processed). There is a note on this in the Spring Boot manual, but it&amp;rsquo;s easy to miss.&lt;/p&gt;&lt;p&gt;Rather than duplicate the logging configuration in each YAML file, I instead opted to put it in the logback configuration file, since Spring Boot uses logback - see &lt;a href="https://github.com/paulc4/microservices-demo/blob/master/src/main/resources/logback.xml"&gt;src/main/resources/logback.xml&lt;/a&gt;. All three services will share the same &lt;code&gt;logback.xml&lt;/code&gt;.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring IO Platform 1.1.3 released</title>
    <link rel="alternate" href="https://spring.io/blog/2015/07/13/spring-io-platform-1-1-3-released" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Andy Wilkinson</name>
    </author>
    <id>tag:spring.io,2015-07-13:2187</id>
    <updated>2015-07-13T19:35:06Z</updated>
    <content type="html">&lt;p&gt;We are pleased to announce that &lt;a href="http://platform.spring.io/platform"&gt;Spring IO Platform&lt;/a&gt; 1.1.3.RELEASE is now available from both &lt;a href="http://repo.spring.io/release"&gt;repo.spring.io&lt;/a&gt; and &lt;a href="http://search.maven.org/#search%7Cga%7C1%7Cg%3Aio.spring.platform"&gt;Maven Central&lt;/a&gt;. &lt;/p&gt;&lt;p&gt;This maintenance release upgrades the versions of a number of the projects in the Platform to pick up their latest maintenance releases:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring AMQP 1.4.5&lt;/li&gt;
  &lt;li&gt;Spring Batch 3.0.4&lt;/li&gt;
  &lt;li&gt;Spring Boot 1.2.5&lt;/li&gt;
  &lt;li&gt;Spring Data Evans SR3&lt;/li&gt;
  &lt;li&gt;Spring Framework 4.1.7&lt;/li&gt;
  &lt;li&gt;Spring Integration 4.1.5&lt;/li&gt;
  &lt;li&gt;Spring LDAP 2.0.3&lt;/li&gt;
  &lt;li&gt;Spring Mobile 1.1.4&lt;/li&gt;
  &lt;li&gt;Spring Session 1.0.1&lt;/li&gt;
  &lt;li&gt;Spring Social 1.1.2&lt;/li&gt;
  &lt;li&gt;Spring Social Facebook 2.0.1&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The versions of many third-party dependencies have also been updated.&lt;/p&gt;&lt;p&gt;&lt;a href="http://platform.spring.io/platform"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-io/platform"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-io/platform/issues"&gt;Issues&lt;/a&gt; | &lt;a href="http://docs.spring.io/platform/docs/1.1.3.RELEASE/reference/htmlsingle"&gt;Documentation&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Boot 1.3.0.M2 Available Now</title>
    <link rel="alternate" href="https://spring.io/blog/2015/07/10/spring-boot-1-3-0-m2-available-now" />
    <category term="releases" label="Releases" />
    <author>
      <name>Phil Webb</name>
    </author>
    <id>tag:spring.io,2015-07-10:2186</id>
    <updated>2015-07-10T04:20:00Z</updated>
    <content type="html">&lt;p&gt;Spring Boot v1.3.0.M2 is available now from the &lt;a href="http://repo.springsource.org/milestone/"&gt;Spring milestone repository&lt;/a&gt;. This release closes a whopping &lt;a href="https://github.com/spring-projects/spring-boot/issues?q=milestone%3A1.3.0.M2+is%3Aissue+is%3Aclosed"&gt;73 issues&lt;/a&gt; and merges &lt;a href="https://github.com/spring-projects/spring-boot/pulls?q=milestone%3A1.3.0.M2+is%3Aclosed+is%3Apr"&gt;59 pull-requests&lt;/a&gt;! Thanks to everyone that has contributed.&lt;/p&gt;&lt;p&gt;Highlights of the new release include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Auto-configuration support for &lt;a href="http://jooq.org"&gt;jOOQ&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Hypermedia support for actuator endpoints.&lt;/li&gt;
  &lt;li&gt;Support for ANSI color &lt;code&gt;banner.txt&lt;/code&gt; files.&lt;/li&gt;
  &lt;li&gt;An improved way to access &lt;code&gt;ApplicationArguments&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;New &lt;code&gt;/flyway&lt;/code&gt;, &lt;code&gt;/liquibase&lt;/code&gt; and &lt;code&gt;/logfile&lt;/code&gt; actuator endpoints.&lt;/li&gt;
  &lt;li&gt;Auto-configuration support for &lt;a href="http://projects.spring.io/spring-session/"&gt;Spring Session&lt;/a&gt; with Redis.&lt;/li&gt;
  &lt;li&gt;Property based configuration of Spring&amp;rsquo;s &lt;a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#mvc-config-static-resources"&gt;&amp;ldquo;resource chains&amp;rdquo;&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;New logback &lt;code&gt;&amp;lt;springProfile&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;springProperty&amp;gt;&lt;/code&gt; tags.&lt;/li&gt;
  &lt;li&gt;Support for &lt;a href="http://activemq.apache.org/artemis/"&gt;Apache Artemis&lt;/a&gt; (following the donation of HornetQ to Apache).&lt;/li&gt;
  &lt;li&gt;A new AntLib module to help create executable jars from Apache Ant.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;For a complete list of changes, and upgrade instructions, see the &lt;a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-1.3-Release-Notes"&gt;Spring Boot 1.3 Release Notes&lt;/a&gt; on the WIKI and the updated &lt;a href="http://docs.spring.io/spring-boot/docs/1.3.0.M2/reference/htmlsingle/"&gt;reference documentation&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;As always, early feedback and &lt;a href="https://github.com/spring-projects/spring-boot/issues"&gt;bug reports&lt;/a&gt; are extremely valuable to us and very welcome.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Webinar Replay: Debug and Maintain your Spring Boot App</title>
    <link rel="alternate" href="https://spring.io/blog/2015/07/09/webinar-replay-debug-and-maintain-your-spring-boot-app" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-07-09:2185</id>
    <updated>2015-07-09T15:48:00Z</updated>
    <content type="html">&lt;p&gt;Speaker: Greg Turnquist&lt;/p&gt;
&lt;p&gt;So you have decided to build an application using Spring Boot? Sooner or later, something will go wrong. It does not matter how experienced we are. How will Spring Boot help us figure out what went wrong and fix things? This talk introduces lots of tools to help us debug and manage &amp;quot;bootiful&amp;quot; apps. You will learn how to use Boot's autoconfiguration report, override Boot's settings &amp;amp; beans, create custom metrics/health checks/app info, and create custom JMX info &amp;amp; custom CRaSH commands.&lt;/p&gt;
&lt;p&gt;Slides: &lt;a href="https://speakerdeck.com/gregturn/debug-and-maintain-your-spring-boot-apps"&gt;https://speakerdeck.com/gregturn/debug-and-maintain-your-spring-boot-apps&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; Code at&lt;a href="https://github.com/gregturn/debug-your-spring-boot-app"&gt; https://github.com/gregturn/debug-your-spring-boot-app &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Learn about about Spring Boot at &lt;a href="http://projects.spring.io/spring-security"&gt;http://projects.spring.io/spring-boot&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Learn about about Spring Framework at &lt;a href="http://projects.spring.io/spring-framework"&gt;http://projects.spring.io/spring-framework&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;iframe width="420" height="315" src="https://www.youtube.com/embed/L5JgndjwwBo" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt; &lt;/p&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - July 7th, 2015</title>
    <link rel="alternate" href="https://spring.io/blog/2015/07/07/this-week-in-spring-july-7th-2015" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2015-07-07:2183</id>
    <updated>2015-07-07T20:09:26Z</updated>
    <content type="html">&lt;p&gt;Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! As usual, we&amp;rsquo;ve got a lot to cover so let&amp;rsquo;s get to it! This week I&amp;rsquo;ll be in Shanghai, China, talking to some customers (say hi on Twitter!) and then it&amp;rsquo;s off to Shenzhen, China, where &lt;a href="http://www.archsummit.com/"&gt;I&amp;rsquo;ll be giving a keynote at the ArchSummit conference&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Integraton lead Gary Russell &lt;a href="https://spring.io/blog/2015/07/07/spring-integration-4-2-milestone-2-is-available-and-4-1-6"&gt;has just announced Spring Integration 4.2 and 4.1.6 are now available&lt;/a&gt;. The new release includes support for Apache Zookeeper, Java 8 &lt;code&gt;CompletableFuture&lt;/code&gt;s, (S)FTP &lt;code&gt;-stream&lt;/code&gt;s, and several performance improvements.&lt;/li&gt;
  &lt;li&gt;Spring Boot co-lead Phil Webb &lt;a href="https://spring.io/blog/2015/07/02/spring-boot-1-2-5-released"&gt;has just announced Spring Boot 1.2.5&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Spring framework 4.2 is &lt;em&gt;fast&lt;/em&gt; approaching (in about a week!) and there are many new versions of many different (and sometimes new) projects supported. To find out more, check out &lt;a href="https://spring.io/blog/2015/07/01/hibernate-jackson-jetty-etc-support-in-spring-4-2"&gt;this detailed blog by Spring framework lead Juergen Hoeller&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data ninja Christoph Strobl has &lt;a href="https://spring.io/blog/2015/07/01/spring-data-fowler-sr-1-released"&gt;just announced the Spring Data Fowler SR1 release&lt;/a&gt;. This is a maintenance release packed with lots of new features so be sure to get the bits.&lt;/li&gt;
  &lt;li&gt;Spring Data lead Oliver Gierke has just announced &lt;a href="https://spring.io/blog/2015/07/01/final-spring-data-service-releases-evans-sr3-and-dijkstra-sr6-released"&gt;the final Spring Data Service Releases (Evans SR3 and Dijkstra SR6)&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Daniel Jagielski has put together a nice look at the pros/cons of using Spring Boot and DropWizard. It should be noted that we on &lt;a href="http://www.schibsted.pl/2015/07/spring-boot-and-dropwizard-in-microservices-development/"&gt;the Spring Boot team were definitely inspired by DropWizard &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I found an oldie-but-goodie: this is Agile luminary &lt;a href="http://www.exampler.com/blog/2008/11/14/agile-development-practices-keynote-text/"&gt;Brian Marick&amp;rsquo;s review of agile development practices from this 2008 blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Want to catch up with all things Redis? &lt;a href="https://redislabs.com/redis-watch-archive/49"&gt;I quite like the Redislabs newsletter, whose latest issue I&amp;rsquo;m linking to&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Our pal Marten Deinum has put together a &lt;a href="https://mdeinum.wordpress.com/2015/07/01/spring-framework-hidden-gems/"&gt;nice look at some great Spring framework &lt;em&gt;gems&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I love &lt;em&gt;Cloud Foundry After Dark&lt;/em&gt; the livestream&amp;rsquo;d Google Hangout featuring various Cloud Foundry luminaries every Sunday. In this episode, &lt;a href="http://twitter.com/littleidea"&gt;one of our heros - Andrew Clay Shafer&lt;/a&gt; - &lt;a href="https://www.youtube.com/watch?v=MBl18nUde0U"&gt;shaves his head&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I really dug &lt;a href="http://blog.pivotal.io/pivotal-conversations/features/the-agility-frontier-continuous-delivery-and-pivotal-cloud-foundry"&gt;Michael Cote&amp;rsquo;s interview on continuous delivery using Pivotal Cloud Foundry&lt;/a&gt; - check it out!&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>Spring Integration 4.2 Milestone 2 is Available (and 4.1.6)</title>
    <link rel="alternate" href="https://spring.io/blog/2015/07/07/spring-integration-4-2-milestone-2-is-available-and-4-1-6" />
    <category term="releases" label="Releases" />
    <author>
      <name>Gary Russell</name>
    </author>
    <id>tag:spring.io,2015-07-07:2182</id>
    <updated>2015-07-07T16:22:00Z</updated>
    <content type="html">&lt;p&gt;We are pleased to announce that the second milestone for the upcoming 4.2 release of Spring Integration is now available. In addition to those features in &lt;a href="https://spring.io/blog/2015/05/28/spring-integration-4-2-milestone-1-is-available"&gt;milestone 1&lt;/a&gt; this release includes:&lt;/p&gt;&lt;h2&gt;&lt;a href="#zookeeper-support" class="anchor" name="zookeeper-support"&gt;&lt;/a&gt;Zookeeper Support&lt;/h2&gt;&lt;p&gt;Several components have been added that use zookeeper, including a &lt;code&gt;LockRegistry&lt;/code&gt; and &lt;code&gt;MetadataStore&lt;/code&gt; but probably the most significant is the ability to assign endpoints to a leadership &lt;code&gt;Role&lt;/code&gt;, with the endpoint lifecycle being controlled by the leadership status. When an application context is granted leadership, all endpoints in the corresponding role are started automatically. Similarly when leadership is revoked, the endpoints are stopped.&lt;/p&gt;&lt;p&gt;This can be useful for configuring a hot-standby instance of an application.&lt;/p&gt;&lt;h2&gt;&lt;a href="#completablefuture" class="anchor" name="completablefuture"&gt;&lt;/a&gt;CompletableFuture&lt;/h2&gt;&lt;p&gt;When running with Java 8, gateway methods can now return &lt;code&gt;CompletableFuture&amp;lt;?&amp;gt;&lt;/code&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a href="#aggregator" class="anchor" name="aggregator"&gt;&lt;/a&gt;Aggregator&lt;/h2&gt;&lt;p&gt;It is now possible to more easily configure an &lt;code&gt;aggregator&lt;/code&gt; as a message barrier where, when the message group is released (due to completion or timeout), each message is released individually rather than as a collection.&lt;/p&gt;&lt;h2&gt;&lt;a href="#s-ftp" class="anchor" name="s-ftp"&gt;&lt;/a&gt;(S)FTP&lt;/h2&gt;&lt;p&gt;The SFTP and FTP outbound gateways now support the &lt;code&gt;-stream&lt;/code&gt; option when &lt;code&gt;get&lt;/code&gt;ing files and the message payload is an &lt;code&gt;InputStream&lt;/code&gt; allowing direct streaming of the remote file. When using this feature for a text file, in conjunction with a &lt;code&gt;FileSplitter&lt;/code&gt; (&lt;code&gt;&amp;lt;int-file:splitter/&amp;gt;&lt;/code&gt;) each line can be processed individually without copying the file to local disk.&lt;/p&gt;&lt;h2&gt;&lt;a href="#performance-improvements" class="anchor" name="performance-improvements"&gt;&lt;/a&gt;Performance Improvements&lt;/h2&gt;&lt;p&gt;Some performance bottlenecks have been identified and corrected.&lt;/p&gt;&lt;p&gt;See the &lt;a href="https://jira.spring.io/jira/secure/ReleaseNote.jspa?projectId=10121&amp;version=15106"&gt;release notes&lt;/a&gt; for complete information and the &lt;a href="http://projects.spring.io/spring-integration/"&gt;project page&lt;/a&gt; for documentation and download details.&lt;/p&gt;&lt;p&gt;As a reminder, the &lt;a href="https://spring.io/blog/2015/06/19/spring-integration-kafka-1-2-is-available-with-0-8-2-support-and-performance-enhancements"&gt;Apache Kafka extension&lt;/a&gt; now supports version 0.8.2 of kafka.&lt;/p&gt;&lt;p&gt;The 4.1.6.RELEASE containing a &lt;a href="https://jira.spring.io/jira/secure/ReleaseNote.jspa?projectId=10121&amp;version=15215"&gt;few bug fixes and minor improvements&lt;/a&gt; is also available in the &lt;a href="https://repo.spring.io/release"&gt;spring repo&lt;/a&gt; and will be in maven central shortly.&lt;/p&gt;&lt;h1&gt;&lt;a href="#springone-2gx-2015-is-around-the-corner" class="anchor" name="springone-2gx-2015-is-around-the-corner"&gt;&lt;/a&gt;SpringOne 2GX 2015 is around the corner!&lt;/h1&gt;&lt;p&gt;Book your place at &lt;a href="http://www.springone2gx.com"&gt;SpringOne2GX in Washington, DC soon&lt;/a&gt;. Super Early Bird Price expires June 12th! It&amp;rsquo;s simply the best opportunity to find out first hand all that&amp;rsquo;s going on and to provide direct feedback. &lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Boot 1.2.5 released</title>
    <link rel="alternate" href="https://spring.io/blog/2015/07/02/spring-boot-1-2-5-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Phil Webb</name>
    </author>
    <id>tag:spring.io,2015-07-02:2180</id>
    <updated>2015-07-02T07:17:48Z</updated>
    <content type="html">&lt;p&gt;Spring Boot 1.2.5 has been released and is available now from &lt;a href="http://repo.spring.io/release"&gt;repo.spring.io&lt;/a&gt; and &lt;a href="http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.springframework.boot%22"&gt;Maven Central&lt;/a&gt;. &lt;/p&gt;&lt;p&gt;This maintenance release includes a &lt;a href="https://github.com/spring-projects/spring-boot/issues?q=milestone%3A1.2.5"&gt;number of fixes&lt;/a&gt; and most importantly updates the managed Spring Framework dependency to &lt;a href="https://spring.io/blog/2015/06/30/spring-framework-4-1-7-3-2-14-released"&gt;version 4.1.7&lt;/a&gt; (which includes an important &lt;a href="http://pivotal.io/security/cve-2015-3192"&gt;security fix&lt;/a&gt;). &lt;/p&gt;&lt;p&gt;We recommend that all Spring Boot users upgrade.&lt;/p&gt;&lt;p&gt;&lt;a href="http://projects.spring.io/spring-boot/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot/issues"&gt;Issues&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle"&gt;Documentation&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Hibernate, Jackson, Jetty etc support in Spring 4.2</title>
    <link rel="alternate" href="https://spring.io/blog/2015/07/01/hibernate-jackson-jetty-etc-support-in-spring-4-2" />
    <category term="releases" label="Releases" />
    <author>
      <name>Juergen Hoeller</name>
    </author>
    <id>tag:spring.io,2015-07-01:2179</id>
    <updated>2015-07-01T09:30:00Z</updated>
    <content type="html">&lt;p&gt;Spring is well-known to actively support the latest versions of common open source projects out there, e.g. &lt;a href="http://hibernate.org/"&gt;Hibernate&lt;/a&gt; and &lt;a href="https://github.com/FasterXML/jackson"&gt;Jackson&lt;/a&gt; but also common server engines such as &lt;a href="http://tomcat.apache.org/"&gt;Tomcat&lt;/a&gt; and &lt;a href="http://www.eclipse.org/jetty/"&gt;Jetty&lt;/a&gt;. We usually do this in a backwards-compatible fashion, supporting older versions at the same time - either through reflective adaptation or through separate support packages. This allows for applications to selectively decide about upgrades, e.g. upgrading to the latest Spring and Jackson versions while preserving an existing Hibernate 3 investment.&lt;/p&gt;&lt;p&gt;With the upcoming Spring Framework 4.2, we are taking the opportunity to support quite a list of new open source project versions, including some rather major ones:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Hibernate ORM 5.0&lt;/li&gt;
  &lt;li&gt;Hibernate Validator 5.2&lt;/li&gt;
  &lt;li&gt;Undertow 1.2 / WildFly 9&lt;/li&gt;
  &lt;li&gt;Jackson 2.6&lt;/li&gt;
  &lt;li&gt;Jetty 9.3&lt;/li&gt;
  &lt;li&gt;Reactor 2.0&lt;/li&gt;
  &lt;li&gt;SockJS 1.0 final&lt;/li&gt;
  &lt;li&gt;Moneta 1.0 (the JSR-354 Money &amp;amp; Currency reference implementation)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;While early support for the above is shipping in the Spring Framework 4.2 RCs already, the ultimate point that we&amp;rsquo;re working towards is of course &lt;a href="https://jira.spring.io/browse/SPR/fixforversion/14954"&gt;4.2 GA - rescheduled for July 30th&lt;/a&gt;.&lt;br/&gt;At this point, we&amp;rsquo;re eagerly waiting for Hibernate ORM 5.0 and Hibernate Validator 5.2 to GA (both of them are currently at RC1), as well as WildFly 9.0 (currently at RC2) and Jackson 2.6 (currently at RC3). Tight timing&amp;hellip; By our own 4.2 GA on July 30th, we&amp;rsquo;ll keep supporting the latest release candidates, rolling any remaining GA support into our 4.2.1 if necessary.&lt;/p&gt;&lt;p&gt;If you&amp;rsquo;d like to give some of those current release candidates a try with Spring, let us know how it goes. Now is a perfect time for such feedback towards Spring Framework 4.2 GA!&lt;/p&gt;&lt;p&gt;&lt;b&gt;Update: WildFly 9.0 is final now. If you have a chance to test Spring Framework 4.2 RC2 on it, please let us know how it goes in time for our 4.2 RC3 (July 15)! Hibernate ORM 5.0 RC2 is available in the meantime as well, with our 4.2 RC3 shipping against it.&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;P.S.:&lt;br/&gt;Note that you may of course keep using e.g. Hibernate ORM 3.6+ and Hibernate Validator 4.3+ even with Spring Framework 4.2. A migration to Hibernate ORM 5.0 in particular is likely to affect quite a bit of your setup, so we only recommend it in a major revision of your application, whereas Spring Framework 4.2 itself is designed as a straightforward upgrade path with no impact on existing code and therefore immediately recommended to all users.&lt;/i&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Data Fowler SR 1 released</title>
    <link rel="alternate" href="https://spring.io/blog/2015/07/01/spring-data-fowler-sr-1-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Christoph Strobl</name>
    </author>
    <id>tag:spring.io,2015-06-30:2175</id>
    <updated>2015-07-01T08:42:23Z</updated>
    <content type="html">&lt;p&gt;Hot on the heels of the &lt;a href="https://spring.io/blog/2015/07/01/final-spring-data-service-releases-evans-sr3-and-dijkstra-sr6-released"&gt;final service updates&lt;/a&gt; for the release trains Dijkstra and Evans, the first service release for the Spring Data release train Fowler has just been shipped to &lt;a href="http://repo.spring.io/"&gt;repo.spring.io&lt;/a&gt; and &lt;a href="http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.springframework.data%22"&gt;Maven Central&lt;/a&gt;. The Fowler SR1 maintenance release includes a total of &lt;a href="https://jira.spring.io/issues/?filter=15140"&gt;119 issues&lt;/a&gt; solved and is a recommended upgrade for all users.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Data Commons 1.10.1 - &lt;a href="http://repo.spring.io/libs-release/org/springframework/data/spring-data-commons/1.10.1.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/commons/docs/1.10.1.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/commons/docs/1.10.1.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/commons/docs/1.10.1.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JPA 1.8.1 - &lt;a href="http://repo.spring.io/libs-release/org/springframework/data/spring-data-jpa/1.8.1.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/jpa/docs/1.8.1.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/jpa/docs/1.8.1.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/jpa/docs/1.8.1.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data MongoDB 1.7.1 - &lt;a href="http://repo.spring.io/libs-release/org/springframework/data/spring-data-mongodb/1.7.1.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/mongodb/docs/1.7.1.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/mongodb/docs/1.7.1.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/mongodb/docs/1.7.1.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Neo4j 3.3.1 - &lt;a href="http://repo.spring.io/libs-release/org/springframework/data/spring-data-neo4j/3.3.1.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/neo4j/docs/3.3.1.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/neo4j/docs/3.3.1.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/neo4j/docs/3.3.1.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Solr 1.4.1 - &lt;a href="http://repo.spring.io/libs-release/org/springframework/data/spring-data-solr/1.4.1.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/solr/docs/1.4.1.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/solr/docs/1.4.1.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/solr/docs/1.4.1.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Couchbase 1.3.1 - &lt;a href="http://repo.spring.io/libs-release/org/springframework/data/spring-data-couchbase/1.3.1.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/couchbase/docs/1.3.1.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/couchbase/docs/1.3.1.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/couchbase/docs/1.3.1.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Cassandra 1.2.1 - &lt;a href="http://repo.spring.io/libs-release/org/springframework/data/spring-data-cassandra/1.2.1.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/cassandra/docs/1.2.1.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/cassandra/docs/1.2.1.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/cassandra/docs/1.2.1.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Elasticsearch 1.2.1 - &lt;a href="http://repo.spring.io/libs-release/org/springframework/data/spring-data-elasticsearch/1.2.1.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/elasticsearch/docs/1.2.1.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/elasticsearch/docs/1.2.1.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/elasticsearch/docs/1.2.1.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Gemfire 1.6.1 - &lt;a href="http://repo.spring.io/libs-release/org/springframework/data/spring-data-gemfire/1.6.1.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/gemfire/docs/1.6.1.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/gemfire/docs/1.6.1.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/gemfire/docs/1.6.1.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Redis 1.5.1 - &lt;a href="http://repo.spring.io/libs-release/org/springframework/data/spring-data-redis/1.5.1.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/redis/docs/1.5.1.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/redis/docs/1.5.1.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/redis/docs/1.5.1.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data REST 2.3.1 - &lt;a href="http://repo.spring.io/libs-release/org/springframework/data/spring-data-rest-webmvc/2.3.1.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/rest/docs/2.3.1.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/rest/docs/2.3.1.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/rest/docs/2.3.1.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Moving on we will concentrate on the second milestone and first release candidate of Spring Data Gosling. The general availability for Gosling scheduled for SpringOne 2015. Speaking of which…&lt;/p&gt;&lt;h2&gt;&lt;a href="#springone-2gx-2015-is-around-the-corner" class="anchor" name="springone-2gx-2015-is-around-the-corner"&gt;&lt;/a&gt;SpringOne 2GX 2015 is around the corner!&lt;/h2&gt;&lt;p&gt;Book your place at &lt;a href="http://www.springone2gx.com"&gt;SpringOne2GX in Washington, DC soon&lt;/a&gt;. It&amp;rsquo;s simply the best opportunity to find out first hand all that&amp;rsquo;s going on and to provide direct feedback. Check recent blog posts to see what I mean and there is more to come!&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Final Spring Data Service Releases Evans SR3 and Dijkstra SR6 released</title>
    <link rel="alternate" href="https://spring.io/blog/2015/07/01/final-spring-data-service-releases-evans-sr3-and-dijkstra-sr6-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Oliver Gierke</name>
    </author>
    <id>tag:spring.io,2015-07-01:2178</id>
    <updated>2015-07-01T08:41:23Z</updated>
    <content type="html">&lt;p&gt;On behalf of the Spring Data team I&amp;rsquo;d like to announce the availability of the final service release of the Spring Data release trains Evans and Dijkstra. Evans SR3 ships &lt;a href="https://jira.spring.io/issues/?filter=14961"&gt;114 tickets fixed&lt;/a&gt;, Dijkstra SR6 has &lt;a href="https://jira.spring.io/issues/?filter=15031"&gt;56 bugs squashed&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Dijkstra is the last release train compatible with Spring 3.2 and picks up the &lt;a href="https://spring.io/blog/2015/06/30/spring-framework-4-1-7-3-2-14-released"&gt;latest service release&lt;/a&gt; of that as well. Evans has been superseded by Fowler (currently in use in Spring Boot 1.2) which saw a &lt;a href="https://spring.io/blog/2015/07/01/spring-data-fowler-sr-1-released"&gt;first service release&lt;/a&gt; today as well. The service releases are basically considered a conclusion of the branches and upgrading to Fowler is recommended to all users. &lt;/p&gt;&lt;h2&gt;&lt;a href="#spring-data-evans-sr3" class="anchor" name="spring-data-evans-sr3"&gt;&lt;/a&gt;Spring Data Evans SR3&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Data Commons 1.9.3 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-commons/1.9.3.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/commons/docs/1.9.3.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/commons/docs/1.9.3.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/commons/docs/1.9.3.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JPA 1.7.3 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-jpa/1.7.3.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/jpa/docs/1.7.3.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/jpa/docs/1.7.3.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/jpa/docs/1.7.3.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data MongoDB 1.6.3 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-mongodb/1.6.3.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/mongodb/docs/1.6.3.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/mongodb/docs/1.6.3.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/mongodb/docs/1.6.3.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Neo4j 3.2.3 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-neo4j/3.2.3.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/neo4j/docs/3.2.3.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/neo4j/docs/3.2.3.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/neo4j/docs/3.2.3.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Solr 1.3.3 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-solr/1.3.3.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/solr/docs/1.3.3.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/solr/docs/1.3.3.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/solr/docs/1.3.3.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Couchbase 1.2.3 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-couchbase/1.2.3.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/couchbase/docs/1.2.3.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/couchbase/docs/1.2.3.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/couchbase/docs/1.2.3.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Cassandra 1.1.3 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-cassandra/1.1.3.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/cassandra/docs/1.1.3.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/cassandra/docs/1.1.3.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/cassandra/docs/1.1.3.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Elasticsearch 1.1.3 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-elasticsearch/1.1.3.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/elasticsearch/docs/1.1.3.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/elasticsearch/docs/1.1.3.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/elasticsearch/docs/1.1.3.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Gemfire 1.5.3 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-gemfire/1.5.3.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/gemfire/docs/1.5.3.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/gemfire/docs/1.5.3.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/gemfire/docs/1.5.3.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Redis 1.4.3 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-redis/1.4.3.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/redis/docs/1.4.3.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/redis/docs/1.4.3.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/redis/docs/1.4.3.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data REST 2.2.3 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-rest-webmvc/2.2.3.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/rest/docs/2.2.3.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/rest/docs/2.2.3.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/rest/docs/2.2.3.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;&lt;a href="#spring-data-dijkstra-sr6" class="anchor" name="spring-data-dijkstra-sr6"&gt;&lt;/a&gt;Spring Data Dijkstra SR6&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Data Commons 1.8.6 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-commons/1.8.6.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/commons/docs/1.8.6.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/commons/docs/1.8.6.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/commons/docs/1.8.6.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JPA 1.6.6 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-jpa/1.6.6.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/jpa/docs/1.6.6.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/jpa/docs/1.6.6.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/jpa/docs/1.6.6.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data MongoDB 1.5.6 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-mongodb/1.5.6.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/mongodb/docs/1.5.6.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/mongodb/docs/1.5.6.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/mongodb/docs/1.5.6.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Neo4j 3.1.6 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-neo4j/3.1.6.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/neo4j/docs/3.1.6.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/neo4j/docs/3.1.6.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/neo4j/docs/3.1.6.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Solr 1.2.6 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-solr/1.2.6.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/solr/docs/1.2.6.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/solr/docs/1.2.6.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/solr/docs/1.2.6.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Couchbase 1.1.6 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-couchbase/1.1.6.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/couchbase/docs/1.1.6.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/couchbase/docs/1.1.6.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/couchbase/docs/1.1.6.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Cassandra 1.0.6 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-cassandra/1.0.6.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/cassandra/docs/1.0.6.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/cassandra/docs/1.0.6.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Elasticsearch 1.0.6 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-elasticsearch/1.0.6.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/elasticsearch/docs/1.0.6.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/elasticsearch/docs/1.0.6.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/elasticsearch/docs/1.0.6.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Gemfire 1.4.6 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-gemfire/1.4.6.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/gemfire/docs/1.4.6.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/gemfire/docs/1.4.6.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/gemfire/docs/1.4.6.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Redis 1.3.6 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-redis/1.3.6.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/redis/docs/1.3.6.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/redis/docs/1.3.6.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/redis/docs/1.3.6.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data REST 2.1.6 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-rest-webmvc/2.1.6.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/rest/docs/2.1.6.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/rest/docs/2.1.6.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/rest/docs/2.1.6.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;&lt;a href="#springone-2gx-2015-is-around-the-corner" class="anchor" name="springone-2gx-2015-is-around-the-corner"&gt;&lt;/a&gt;SpringOne 2GX 2015 is around the corner!&lt;/h2&gt;&lt;p&gt;Book your place at &lt;a href="http://www.springone2gx.com"&gt;SpringOne2GX in Washington, DC soon&lt;/a&gt;. It&amp;rsquo;s simply the best opportunity to find out first hand all that&amp;rsquo;s going on and to provide direct feedback. Check recent blog posts to see what I mean and there is more to come!&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - June 30th, 2015</title>
    <link rel="alternate" href="https://spring.io/blog/2015/06/30/this-week-in-spring-june-30th-2015" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2015-07-01:2177</id>
    <updated>2015-06-30T23:04:00Z</updated>
    <content type="html">&lt;p&gt;Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! This week I&amp;rsquo;m in warm &amp;rsquo;n wonderful Austin, TX to meet with customers and then off to Mexico City, Mexico to present the keynote at a &lt;a href="http://sg.com.mx/sgce"&gt;the SG Conference and Expo&lt;/a&gt;. If you&amp;rsquo;re in Mexico City y si le gustaria hablarme sobre todos las cosas Spring y la informatica, sere a Mexico City desde miercoles. No hesita a contactarme en &lt;a href="http://twitter.com/starbuxman"&gt;Twitter (@starbuxman)&lt;/a&gt;!&lt;/p&gt;&lt;p&gt;It&amp;rsquo;s June 30th! Whew this year is &lt;em&gt;flying&lt;/em&gt;! We&amp;rsquo;ve got a lot to cover this week so let&amp;rsquo;s get to it!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring framework lead Juergen Hoeller just &lt;a href="https://spring.io/blog/2015/06/30/spring-framework-4-1-7-3-2-14-released"&gt;announced Spring framework 4.1.7 and 3.2.14, both of which are maintenance releases&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring framework ninja &lt;a href="https://spring.io/blog/2015/06/30/spring-framework-4-2-rc2-available-now"&gt;Stephane Nicoll just announced Spring framework 4.2 RC2, packed with lots of new features!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Tool Suite lead Martin Lippert just &lt;a href="http://spring.io/blog/2015/06/30/spring-tool-suite-3-7-0-released"&gt;announced updates version 3.7.0&lt;/a&gt;. The updates include Eclipse Mars 4.5 GA, Spring Boot YML support, improved Cloud Foundry integration, Pivotal tcServer 3.1.1 support, and early support for Spring Roo 2.0.0.M1 (thanks to Disid).&lt;/li&gt;
  &lt;li&gt;the good Dr. Syer, co-founder of the Spring Boot and Spring Cloud projects, just announced &lt;a href="http://spring.io/blog/2015/06/26/spring-cloud-service-release-angel-sr3"&gt;the first Spring Cloud release train&lt;/a&gt;, &lt;em&gt;Angel.SR3&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Spring RESTDocs lead Andy Wilkinson&amp;rsquo;s &lt;a href="http://spring.io/blog/2015/06/25/spring-rest-docs-1-0-0-m1"&gt;just announced Spring REST Docs 1.0.0.M1&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;the &lt;em&gt;Spring Framework Guru&lt;/em&gt; blog has put together a nice piece &lt;a href="https://springframework.guru/spring-boot-web-application-part-2-using-thymeleaf/"&gt;on using Spring Boot with Thymeleaf&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;I hope you caught Spring Data lead Oliver Gierke&amp;rsquo;s &lt;a href="http://zeroturnaround.com/rebellabs/state-of-the-art-data-access-with-spring-data-by-oliver-gierke/"&gt;epic vJUG presentation on elegant data access with Spring Data&lt;/a&gt;!&lt;/li&gt;
  &lt;li&gt;Spring Data artist Thomas Darimont put together a nice GitHub GIST on how to &lt;a href="https://gist.github.com/thomasdarimont/7df3f04d3be7acea5dfa"&gt;use custom SpEL statements in the &lt;code&gt;@Value&lt;/code&gt; annotation&lt;/a&gt;. It&amp;rsquo;s full of cool examples, check it out!&lt;/li&gt;
  &lt;li&gt;Alberto Souza put together a nice (Spanish-language) post on how to &lt;a href="https://domineospring.wordpress.com/2015/06/26/comecando-com-a-magia-do-spring-boot/"&gt;&lt;em&gt;get started with the magic of Spring Boot&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Mohamed Sanaulla has a nice post on using Spring Boot to run &lt;a href="http://www.javabeat.net/spring-boot-testing/"&gt;full integration tests against Spring Boot-based REST services &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The Keyhole software blog has a nice post on &lt;a href="https://keyholesoftware.com/2015/06/29/spring-batch-javaconfig/"&gt;moving a Spring Batch job from XML configuration to the Java configuration DSL&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;the Nixmash blog has a nice post on changing the default &lt;code&gt;.favico&lt;/code&gt; file that gets shown in Spring MVC. The post speaks about Spring MVC, but in fact, the approach given only works &lt;a href="http://nixmash.com/java/using-for-favorite-favicon-in-spring-mvc"&gt;when using Spring MVC &lt;em&gt;inside of Spring Boot&lt;/em&gt;&lt;/a&gt;. Otherwise, great post!&lt;/li&gt;
  &lt;li&gt;Justin Musgrove put together a cool video and walkthrough &lt;a href="http://www.leveluplunch.com/java/tutorials/035-prevent-duplicate-form-submission-spring-mvc/"&gt;on how to prevent double click prevention using Spring MVC&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Check out this CFSummit talk that looks at some of the &lt;a href="http://blog.pivotal.io/pivotal-cloud-foundry/products/new-cloud-foundry-service-broker-updates"&gt;new features in the Cloud Foundry Service Broker API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Our pal &lt;a href="http://twitter.com/making"&gt;@Making&lt;/a&gt; put together a nice (Japanese language) talk for &lt;a href="http://www.slideshare.net/makingx/spring-boot-java-jsug"&gt;the JSUG whose slides are available here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>Spring Framework 4.2.RC2 Available Now</title>
    <link rel="alternate" href="https://spring.io/blog/2015/06/30/spring-framework-4-2-rc2-available-now" />
    <category term="releases" label="Releases" />
    <author>
      <name>Stéphane Nicoll</name>
    </author>
    <id>tag:spring.io,2015-06-30:2176</id>
    <updated>2015-06-30T22:39:11Z</updated>
    <content type="html">&lt;p&gt;On behalf of the team I am pleased to announce the second release candidate of Spring Framework 4.2 is now available from our &lt;a href="http://repo.spring.io/milestone/"&gt;milestone repository&lt;/a&gt;. This release includes &lt;a href="https://jira.spring.io/secure/ReleaseNote.jspa?projectId=10000&amp;version=15096"&gt;over 70 fixes and improvements&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;a href="http://projects.spring.io/spring-framework/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-framework"&gt;GitHub&lt;/a&gt; | &lt;a href="https://jira.spring.io/browse/SPR"&gt;Issues&lt;/a&gt; | &lt;a href="https://docs.spring.io/spring-framework/docs/4.2.0.RC2/spring-framework-reference/htmlsingle/"&gt;Documentation&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Framework 4.1.7 &amp; 3.2.14 released</title>
    <link rel="alternate" href="https://spring.io/blog/2015/06/30/spring-framework-4-1-7-3-2-14-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Juergen Hoeller</name>
    </author>
    <id>tag:spring.io,2015-06-30:2173</id>
    <updated>2015-06-30T18:15:04Z</updated>
    <content type="html">&lt;p&gt;Dear Spring community,&lt;/p&gt;&lt;p&gt;I&amp;rsquo;m pleased to announce that the Spring Framework &lt;a href="https://jira.spring.io/browse/SPR/fixforversion/14936"&gt;4.1.7&lt;/a&gt; and &lt;a href="https://jira.spring.io/browse/SPR/fixforversion/14932"&gt;3.2.14&lt;/a&gt; maintenance releases are &lt;a href="http://projects.spring.io/spring-framework/"&gt;available now&lt;/a&gt;. Aside from fixing &lt;a href="https://jira.spring.io/issues/?jql=project%20%3D%20SPR%20AND%20fixVersion%20%3D%204.1.7"&gt;various minor issues&lt;/a&gt; across the framework, these releases also address an &lt;a href="http://pivotal.io/security/cve-2015-3192"&gt;XML parsing vulnerability&lt;/a&gt; through disabling DTD processing by default when parsing untrusted XML input in Spring MVC endpoints.&lt;/p&gt;&lt;p&gt;Note that Spring Framework 3.2.x has its End-of-Life scheduled for &lt;a href="https://spring.io/blog/2015/06/15/spring-framework-3-2-x-eol-on-dec-31-2016"&gt;December 31, 2016&lt;/a&gt;. Based on demand and vulnerability reports, further maintenance releases will be made available up until then. At the same time, we strongly recommend a &lt;a href="https://github.com/spring-projects/spring-framework/wiki/Migrating-from-earlier-versions-of-the-spring-framework"&gt;migration&lt;/a&gt; to Spring Framework 4.1.7 or the upcoming &lt;a href="https://jira.spring.io/browse/SPR/fixforversion/14954"&gt;4.2&lt;/a&gt; at this point; please plan accordingly!&lt;/p&gt;&lt;p&gt;Cheers,&lt;br/&gt;Juergen&lt;/p&gt;&lt;p&gt;&lt;i&gt;P.S.: Stay tuned for Spring Framework 4.2 RC2, following right away!&lt;/i&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Tool Suite 3.7.0 released</title>
    <link rel="alternate" href="https://spring.io/blog/2015/06/30/spring-tool-suite-3-7-0-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Martin Lippert</name>
    </author>
    <id>tag:spring.io,2015-06-30:2174</id>
    <updated>2015-06-30T14:13:11Z</updated>
    <content type="html">&lt;p&gt;Dear Spring Community,&lt;/p&gt;&lt;p&gt;I am happy to announce the 3.7.0 release of the Spring Tool Suite, our Eclipse-based tooling.&lt;/p&gt;&lt;p&gt;Highlights from this release include:&lt;/p&gt;
&lt;ul&gt;&#xD;
&lt;li&gt;updated to Eclipse Mars 4.5 GA (including many fixes and improvements for Java8)&lt;/li&gt;&#xD;
&lt;li&gt;Spring Boot YML properties editor (including content-assist, hovers, navigation, and errors/warnings)&lt;/li&gt;&#xD;
&lt;li&gt;improved support for Cloud Foundry&lt;/li&gt;&#xD;
&lt;li&gt;Pivotal tc Server updated to 3.1.1&lt;/li&gt;&#xD;
&lt;li&gt;early support for Spring Roo 2.0.0.M1 (thanks to Disid)&lt;/li&gt;&#xD;
&lt;/ul&gt;&lt;p&gt;To download the distributions, please go visit:&lt;/p&gt;
&lt;ul&gt;&#xD;
&lt;li&gt;Spring Tool Suite: &lt;a href="https://spring.io/tools/sts/all"&gt;https://spring.io/tools/sts/all&lt;/a&gt;&lt;/li&gt;&#xD;
&lt;/ul&gt;&lt;p&gt;Detailed new and noteworthy notes can be found here: &lt;a href="http://docs.spring.io/sts/nan/v370/NewAndNoteworthy.html"&gt;STS 3.7.0 New &amp;amp; Noteworthy&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;STS 3.7.1 is scheduled to ship in early October 2015, shortly after the Eclipse Mars SR1 release.&lt;/p&gt;&lt;p&gt;Enjoy!&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Cloud service release: Angel.SR3</title>
    <link rel="alternate" href="https://spring.io/blog/2015/06/26/spring-cloud-service-release-angel-sr3" />
    <category term="releases" label="Releases" />
    <author>
      <name>Dave Syer</name>
    </author>
    <id>tag:spring.io,2015-06-26:2172</id>
    <updated>2015-06-26T12:41:00Z</updated>
    <content type="html">&lt;p&gt;The latest version of &lt;a href="http://projects.spring.io/spring-cloud/"&gt;Spring Cloud&lt;/a&gt; is &amp;ldquo;Angel.SR3&amp;rdquo; and it is available now from the usual repositories (note the new naming convention, more detail below). Most components are now at 1.0.2.RELEASE, but spring-cloud-netflix is at 1.0.3.RELEASE. The starters and cli and also at 1.0.3.RELEASE, reflecting their dependency on Netflix. Angel.SR3 is a bugfix release for Angel.SR2 (formerly known as 1.0.2) and all existing projects are encouraged to upgrade to take advantage.&lt;/p&gt;&lt;p&gt;There are a few new features, the biggest of which is the new naming convention for the starter parent project (see below). Highlights include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;p&gt;Support for slashes in git labels (via a special character sequence in the HTTP resource paths)&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;&lt;p&gt;Optional git initialization on Config Server startup&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;&lt;p&gt;Additional options for config clients to handle decryption themselves, including the ability to decrypt properties in &lt;code&gt;bootstrap.yml&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;&lt;p&gt;Additional cryptography configuration options for new RSA and AES algorithms&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;&lt;p&gt;A strategy for key rotation with a &lt;code&gt;TextEncryptorLocator&lt;/code&gt; strategy that users can implement to look up keys dynamically.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;&lt;a href="#release-train" class="anchor" name="release-train"&gt;&lt;/a&gt;Release Train&lt;/h2&gt;&lt;p&gt;Spring Cloud is an umbrella project consisting of independent projects with, in principle, different release cadences. To manage the portfolio a BOM (Bill of Materials) is published with a curated set of dependencies on the individual project (see below). The release trains have names, not versions, to avoid confusion with the sub-projects. The names are an alphabetic sequence (so you can sort them chronologically) with names of London Tube stations (&amp;ldquo;Angel&amp;rdquo; is the first release, &amp;ldquo;Brixton&amp;rdquo; is the second). When point releases of the individual projects accumulate to a critical mass, or if there is a critical bug in one of them that needs to be available to everyone, the release train will push out &amp;ldquo;service releases&amp;rdquo; with names ending &amp;ldquo;.SRX&amp;rdquo;, where &amp;ldquo;X&amp;rdquo; is a number.&lt;/p&gt;&lt;p&gt;The release train is a new thing with this release (Angel.SR3) but the older releases have been re-released (same artifact, different version) as &amp;ldquo;Angel,[RELEASE,SR1,SR2]&amp;rdquo; corresponding to 1.0.0, 1.0.1, 1.0.2 respectively. The release train label is actually only used explicitly in one artifact: &amp;ldquo;spring-cloud-starter-parent&amp;rdquo; (all the others have normal &amp;ldquo;Spring&amp;rdquo; release labels tied to their parent project). The starter parent is the one you can use as a BOM for dependency management or as a parent POM (Maven only). Example using the latest version with the config client and eureka (change the artifact ids to pull in other starters), with Maven with a parent POM:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint xml"&gt;&amp;lt;parent&amp;gt;&#xD;
  &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
  &amp;lt;artifactId&amp;gt;spring-cloud-starter-parent&amp;lt;/artifactId&amp;gt;&#xD;
  &amp;lt;version&amp;gt;Angel.SR3&amp;lt;/version&amp;gt;&#xD;
&amp;lt;/parent&amp;gt;&#xD;
&amp;lt;dependencies&amp;gt;&#xD;
  &amp;lt;dependency&amp;gt;&#xD;
    &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
      &amp;lt;artifactId&amp;gt;spring-cloud-starter-config&amp;lt;/artifactId&amp;gt;&#xD;
  &amp;lt;/dependency&amp;gt;&#xD;
  &amp;lt;dependency&amp;gt;&#xD;
    &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
    &amp;lt;artifactId&amp;gt;spring-cloud-starter-eureka&amp;lt;/artifactId&amp;gt;&#xD;
  &amp;lt;/dependency&amp;gt;&#xD;
  ...&#xD;
&amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;or as a BOM (dependency management only):&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint xml"&gt;&amp;lt;dependencyManagement&amp;gt;&#xD;
  &amp;lt;dependencies&amp;gt;&#xD;
    &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
    &amp;lt;artifactId&amp;gt;spring-cloud-starter-parent&amp;lt;/artifactId&amp;gt;&#xD;
    &amp;lt;version&amp;gt;Angel.SR3&amp;lt;/version&amp;gt;&#xD;
    &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;&#xD;
    &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;&#xD;
  &amp;lt;/dependencies&amp;gt;&#xD;
&amp;lt;/dependencyManagement&amp;gt;&#xD;
&amp;lt;dependencies&amp;gt;&#xD;
  &amp;lt;dependency&amp;gt;&#xD;
    &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
    &amp;lt;artifactId&amp;gt;spring-cloud-starter-config&amp;lt;/artifactId&amp;gt;&#xD;
  &amp;lt;/dependency&amp;gt;&#xD;
  &amp;lt;dependency&amp;gt;&#xD;
    &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
    &amp;lt;artifactId&amp;gt;spring-cloud-starter-eureka&amp;lt;/artifactId&amp;gt;&#xD;
  &amp;lt;/dependency&amp;gt;&#xD;
  ...&#xD;
&amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;or with gradle:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint groovy"&gt;buildscript {&#xD;
  dependencies {&#xD;
    classpath &amp;quot;io.spring.gradle:dependency-management-plugin:0.4.0.RELEASE&amp;quot;&#xD;
  }&#xD;
}&#xD;
&#xD;
apply plugin: &amp;quot;io.spring.dependency-management&amp;quot;&#xD;
&#xD;
dependencyManagement {&#xD;
  imports {&#xD;
    mavenBom &amp;#39;org.springframework.cloud:spring-cloud:Angel.SR3&amp;#39;&#xD;
  }&#xD;
}&#xD;
&#xD;
dependencies {&#xD;
    compile &amp;#39;org.springframework.cloud:spring-cloud-starter-config&amp;#39;&#xD;
    compile &amp;#39;org.springframework.cloud:spring-cloud-starter-eureka&amp;#39;&#xD;
    ...&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a href="#springone-2015" class="anchor" name="springone-2015"&gt;&lt;/a&gt;SpringOne 2015&lt;/h2&gt;&lt;p&gt;I’ll be talking about Spring Cloud at this year’s SpringOne in Washington, DC. I’d love to see you there.&lt;/p&gt;&lt;h3&gt;&lt;a href="#discounts" class="anchor" name="discounts"&gt;&lt;/a&gt;Discounts&lt;/h3&gt;&lt;p&gt;The Early Bird price tier (June 13th - August 14th) is discounted $150.&lt;br/&gt;Register 4 and get the 5th pass free. Contact us with the names of your first 4 registrants for your complimentary pass code (conference admission only).&lt;br/&gt;Alumni, contact us for your discount code ($150 off any option).&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring REST Docs 1.0.0.M1</title>
    <link rel="alternate" href="https://spring.io/blog/2015/06/25/spring-rest-docs-1-0-0-m1" />
    <category term="releases" label="Releases" />
    <author>
      <name>Andy Wilkinson</name>
    </author>
    <id>tag:spring.io,2015-06-24:2171</id>
    <updated>2015-06-25T12:08:00Z</updated>
    <content type="html">&lt;p&gt;I&amp;rsquo;m delighted to announce that &lt;a href="https://github.com/spring-projects/spring-restdocs"&gt;Spring REST Docs&lt;/a&gt; has reached its first milestone and that 1.0.0.M1 is available from &lt;a href="https://repo.spring.io/milestone"&gt;https://repo.spring.io/milestone&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Spring REST Docs helps you to document RESTful services. It combines hand-written documentation written with &lt;a href="http://asciidoctor.org"&gt;Asciidoctor&lt;/a&gt; and auto-generated snippets produced with &lt;a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle#spring-mvc-test-framework"&gt;Spring MVC Test&lt;/a&gt;. This approach frees you from the limitations imposed by tools like &lt;a href="http://swagger.io"&gt;Swagger&lt;/a&gt;. It helps you to produce documentation that is accurate, concise, and well-structured. This documentation then allows your users to get the information they need with a minimum of fuss.&lt;/p&gt;&lt;h1&gt;&lt;a href="#getting-started" class="anchor" name="getting-started"&gt;&lt;/a&gt;Getting started&lt;/h1&gt;&lt;p&gt;To get started with Spring REST Docs, please refer to the &lt;a href="http://docs.spring.io/spring-restdocs/docs/1.0.x/reference/html5/#getting-started"&gt;getting started section&lt;/a&gt; of the &lt;a href="http://docs.spring.io/spring-restdocs/docs/1.0.x/reference/html5"&gt;reference documentation&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;If you&amp;rsquo;d like to learn more about the thinking behind Spring REST Docs and how it can help you, this &lt;a href="https://www.youtube.com/watch?v=knH5ihPNiUs&amp;feature=youtu.be"&gt;presentation on YouTube&lt;/a&gt; may also be of interest.&lt;/p&gt;&lt;h1&gt;&lt;a href="#springone-2015" class="anchor" name="springone-2015"&gt;&lt;/a&gt;SpringOne 2015&lt;/h1&gt;&lt;p&gt;I&amp;rsquo;ll be talking about &lt;a href="https://2015.event.springone2gx.com/schedule/sessions/documenting_restful_apis.html"&gt;documenting RESTful APIs&lt;/a&gt; at this year&amp;rsquo;s &lt;a href="http://springone2gx.com"&gt;SpringOne&lt;/a&gt; in Washington, DC. I&amp;rsquo;d love to see you there.&lt;/p&gt;&lt;h3&gt;&lt;a href="#discounts" class="anchor" name="discounts"&gt;&lt;/a&gt;Discounts&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The Early Bird price tier (June 13th - August 14th) is discounted $150.&lt;/li&gt;
  &lt;li&gt;Register 4 and get the 5th pass free. Contact us with the names of your first 4 registrants for your complimentary pass code (conference admission only).&lt;/li&gt;
  &lt;li&gt;Alumni, contact us for your discount code ($150 off any option).&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - June 23, 2015</title>
    <link rel="alternate" href="https://spring.io/blog/2015/06/23/this-week-in-spring-june-23-2015" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2015-06-23:2170</id>
    <updated>2015-06-23T11:00:00Z</updated>
    <content type="html">&lt;p&gt;Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! I was in London, last week, for &lt;a href="http://www.devoxx.co.uk/"&gt;Devoxx UK&lt;/a&gt;. The show was a rousing success all around. I gave a talk, a workshop, and was delighted to participate in the closing keynote, too! This week I&amp;rsquo;m in Kraków, Poland, for &lt;a href="http://devoxx.pl/"&gt;Devoxx Poland&lt;/a&gt; (né 33rd Degree) which seems to be an amazing success as well! I want to thank the organizers (&lt;a href="http://twitter.com/mrhazell"&gt;Mark Hazell&lt;/a&gt; and &lt;a href="https://twitter.com/grzegorzduda"&gt;Grzegorz Duda&lt;/a&gt; of Devoxx UK and PL respectively) for inviting me - I haven&amp;rsquo;t had this much fun in a while and I &lt;em&gt;love&lt;/em&gt; the communities that both events serve.&lt;/p&gt;&lt;p&gt;In addition to being in the keynote, I was privileged enough to be in this keynote-selfie for a brief moment where Arun Gupta, left, took a moment to recognize recently nominated Java Champions (second-to-left) Trisha Gee, and David Blevins and myself). Thanks very much, Arun! I post it here because it&amp;rsquo;s pretty darned special to me. ;-)&lt;/p&gt;&lt;p&gt;&lt;img src ="https://pbs.twimg.com/media/CH4qGFAWoAAVTR1.jpg" width = "400"/&gt;&lt;/p&gt;&lt;p&gt;So, that said, on to that which is most special: the tide of awesome that is the great stuff in this week&amp;rsquo;s &lt;em&gt;This Week in Spring&lt;/em&gt;!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring XD ninja &lt;a href="http://spring.io/blog/2015/06/19/spring-integration-kafka-1-2-is-available-with-0-8-2-support-and-performance-enhancements"&gt;Marius Bogoevici announced Spring Integration Kafka 1.2&lt;/a&gt;. The new release includes support for Kafka 0.8.2, performance improvements and improved documentation. All in a worthwhile and recomended upgrade!&lt;/li&gt;
  &lt;li&gt;Spring guides ninja Greg Turnquist looks at the Spring team&amp;rsquo;s Java 8-first approach and then announces that the epic &lt;a href="http://spring.io/guides"&gt;guides&lt;/a&gt; have been moved to Java 8 by default.&lt;/li&gt;
  &lt;li&gt;There&amp;rsquo;s a nice introduction by &lt;a href="https://twitter.com/bijukunjummen"&gt;Biju Kunjummen&lt;/a&gt; to Spring Cloud Eureka and the Spring Cloud Config Server over on DZone - as succint as it is useful!&lt;/li&gt;
  &lt;li&gt;Our resident Spring Boot sorceror, Phil Webb, &lt;a href="http://spring.io/blog/2015/06/17/devtools-in-spring-boot-1-3"&gt;looks at the &lt;code&gt;spring-boot-devtools&lt;/code&gt;&lt;/a&gt; in this amazing blog post. Seriously, go read this. I&amp;rsquo;ll wait.. (did you watch the video? isn&amp;rsquo;t that crazy cool?)&lt;/li&gt;
  &lt;li&gt;Big-data doc Dr. Pollack just announced &lt;a href="http://spring.io/blog/2015/06/17/spring-xd-1-2-ga-spring-xd-1-1-3-and-flo-for-spring-xd-beta-released"&gt;Spring XD 1.2 GA, Spring XD 1.1.3, and the Spring XD Flo beta&lt;/a&gt;. There&amp;rsquo;s so much cool stuff in these releases! I particularly love the Spring XD Flo beta (there&amp;rsquo;s even a super cool video included)!&lt;/li&gt;
  &lt;li&gt;Spring XD ninja &lt;a href="http://spring.io/blog/2015/06/17/spring-xd-benchmarks-part-1"&gt;Glenn Renfro has been working on benchmarking&lt;/a&gt; (not &lt;em&gt;benchmarketing&lt;/em&gt;) Spring XD and documents his journey in this first installment.&lt;/li&gt;
  &lt;li&gt;Our pal Eugen Paraschiv is back at it again, this time &lt;a href="http://www.baeldung.com/spring-boot-application-configuration"&gt;with a list of super-convenient configuration options for Spring Boot&lt;/a&gt; applications. I&amp;rsquo;d &lt;em&gt;definitely&lt;/em&gt; give this a review!&lt;/li&gt;
  &lt;li&gt;One of the really nice bits about being here in Poland is that I finally got to meet &lt;a href="https://twitter.com/MGrzejszczak"&gt;Marcin Grzejszczak&lt;/a&gt; and the rest of the amazing 4Finance IT team! They&amp;rsquo;re responsible for some really meaty contributions to Spring Cloud, including improvements to &lt;a href="https://github.com/spring-cloud/spring-cloud-zookeeper/pull/2"&gt;Spring Cloud Zookeeper&lt;/a&gt; and &lt;a href="https://github.com/spring-cloud-incubator/spring-cloud-sleuth/pull/1"&gt;Spring Cloud Sleuth&lt;/a&gt; which provides tracing through microservices - exciting! These improvements are contributions from their other work - a project called micro-infra-spring - which are being merged into Spring Cloud. Dziękuję, my friends!&lt;/li&gt;
  &lt;li&gt;Not &lt;em&gt;nearly&lt;/em&gt; so awesome, but I&amp;rsquo;m pretty proud of the recently merged support &lt;a href="https://github.com/spring-cloud/spring-cloud-cloudfoundry/commit/24aca83e9676daa74380bf903d21df055b5dfde7"&gt;for a Spring Cloud &lt;code&gt;DiscoveryClient&lt;/code&gt; implementation for Cloud Foundry&lt;/a&gt;. This means that, soon, we&amp;rsquo;ll have &lt;code&gt;DiscoveryClient&lt;/code&gt; implementations for Netflix&amp;rsquo;s Eureka, Zookeeper, Consul, Lattice and now Cloud Foundry!&lt;/li&gt;
  &lt;li&gt;Speaking of Spring XD, I&amp;rsquo;d like to specifically call attention to these introductory videos, &lt;a href="https://www.youtube.com/watch?v=IL3XnlOI9vQ&amp;utm_content=buffer87797&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer"&gt;&lt;em&gt;Building Streams&lt;/em&gt;&lt;/a&gt; and &lt;a href="https://www.youtube.com/watch?v=os3WgPa-Axk&amp;utm_content=buffer62fca&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer"&gt;&lt;em&gt;Advanced Stream Creation&lt;/em&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>Spring Integration Kafka 1.2 is available, with 0.8.2 support and performance enhancements</title>
    <link rel="alternate" href="https://spring.io/blog/2015/06/19/spring-integration-kafka-1-2-is-available-with-0-8-2-support-and-performance-enhancements" />
    <category term="releases" label="Releases" />
    <author>
      <name>Marius Bogoevici</name>
    </author>
    <id>tag:spring.io,2015-06-19:2169</id>
    <updated>2015-06-19T19:39:17Z</updated>
    <content type="html">&lt;p&gt;We are pleased to announce the release of Spring Integration Kafka 1.2.&lt;/p&gt;&lt;p&gt;This new release provides a couple of major improvements and upgrades over the previous versions:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Support for Apache Kafka 0.8.2 and using the new Producer API;&lt;/li&gt;
  &lt;li&gt;Overhaul of the internal concurrent dispatching with a non-blocking ring buffer implementation based on &lt;a href="https://github.com/reactor/reactor"&gt;Project Reactor&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;For each of the changes, the goal was to improve the performance of the producer and, respectively, consumer components of Spring Integration Kafka. While we do not have any isolated benchmarks for Spring Integration Kafka proper, the enhancements of the release have contributed to the &lt;a href="https://spring.io/blog/2015/06/17/spring-xd-benchmarks-part-1"&gt;performance metrics&lt;/a&gt; reported in the newly released &lt;a href="https://spring.io/blog/2015/06/17/spring-xd-1-2-ga-spring-xd-1-1-3-and-flo-for-spring-xd-beta-released"&gt;Spring XD 1.2&lt;/a&gt;. &lt;/p&gt;&lt;p&gt;By upgrading to Kafka 0.8.2, some of the options available in the old producer API (for example, sending messages synchronously) aren&amp;rsquo;t supported anymore, and some configuration options are semantically different (batch size, which previously referred to the message count, is now referring to the byte count). In the interest of clarity and reducing surprises, we&amp;rsquo;ve preferred to break backwards compatibility in the XML configuration, by removing unavailable options and renaming existing ones to make sure that they are fully understood. Consult the &lt;a href="https://github.com/spring-projects/spring-integration-kafka"&gt;project&lt;/a&gt; for details.&lt;/p&gt;&lt;p&gt;Happy coding!&lt;/p&gt;&lt;p&gt;Some of the upcoming features will include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Improving the documentation by creating a dedicated wiki;&lt;/li&gt;
  &lt;li&gt;Making it easy to send messages outside of a Spring Integration Kafka outbound channel adapter by providing template support;&lt;/li&gt;
  &lt;li&gt;Exploring the options for Reactive Streams integration.&lt;/li&gt;
&lt;/ul&gt;&lt;h1&gt;&lt;a href="#springone-2gx-2015-is-around-the-corner" class="anchor" name="springone-2gx-2015-is-around-the-corner"&gt;&lt;/a&gt;SpringOne 2GX 2015 is around the corner!&lt;/h1&gt;&lt;p&gt;Book your place at &lt;a href="http://www.springone2gx.com"&gt;SpringOne2GX in Washington, DC soon&lt;/a&gt;. Early Bird Price expires August 14th! It&amp;rsquo;s simply the best opportunity to find out first hand all that&amp;rsquo;s going on and to provide direct feedback.&lt;/p&gt;&lt;h1&gt;&lt;a href="#discounts" class="anchor" name="discounts"&gt;&lt;/a&gt;Discounts&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;The Early Bird price tier (June 13th - August 14th) is discounted $150.&lt;/li&gt;
  &lt;li&gt;Register 4 and get the 5th pass free. Contact us with the names of your first 4 registrants for your complimentary pass code (conference admission only).&lt;/li&gt;
  &lt;li&gt;Alumni, contact us for your discount code ($150 off any option).&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>Spring Guides Move to Java 8</title>
    <link rel="alternate" href="https://spring.io/blog/2015/06/17/spring-guides-move-to-java-8" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Greg Turnquist</name>
    </author>
    <id>tag:spring.io,2015-06-12:2161</id>
    <updated>2015-06-17T16:07:00Z</updated>
    <content type="html">&lt;p&gt;Perhaps you&amp;rsquo;ve noticed some recent articles lately? &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2015/06/10/feedback-welcome-spring-5-system-requirements"&gt;Spring 5 moving up to Java 8+&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Massive adoption of &lt;a href="https://spring.io/blog/2015/06/02/spring-4-and-java-8-adoption"&gt;Spring 4 and Java 8&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://start.spring.io/"&gt;http://start.spring.io/&lt;/a&gt; defaulting to Java 8 as the version of choice&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://docs.spring.io/spring-boot/docs/1.3.0.M1/reference/htmlsingle/#getting-started-system-requirements"&gt;Spring Boot&amp;rsquo;s 1.3.0.M1 reference docs&lt;/a&gt; recommending new apps start at Java 8.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Okay, those last two aren&amp;rsquo;t articles, but were instead driven by the the rapid adoption of Java 8. Java 8 has been picked up by the development community FAST. Here on the Spring team, we believe strongly in adopting Java 8 for new applications. To support that and improve your own ability to move as well, we just updated all of the &lt;a href="https://spring.io/guides"&gt;Spring Getting Started Guides&lt;/a&gt; to Java 8.&lt;/p&gt;&lt;h2&gt;&lt;a href="#jam-packed-list-of-advantages" class="anchor" name="jam-packed-list-of-advantages"&gt;&lt;/a&gt;Jam-packed list of advantages&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Latest and greatest stable version of Java SE. (Features, performance, and more.)&lt;/li&gt;
  &lt;li&gt;Content of the guides are easy to port backwards if needed. Even lambdas map nicely back to single method interfaces.&lt;/li&gt;
  &lt;li&gt;Picking up a guide as your beginner project will get you started with a solid, modern setup.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;In this day and age, with the end of public updates to Java 7, it seems highly unlikely that a developer can&amp;rsquo;t easily his or her hands on a Java 8 SDK and give our code a spin.&lt;/p&gt;&lt;h1&gt;&lt;a href="#springone-2gx-2015-is-around-the-corner" class="anchor" name="springone-2gx-2015-is-around-the-corner"&gt;&lt;/a&gt;SpringOne 2GX 2015 is around the corner!&lt;/h1&gt;&lt;p&gt;Book your place at &lt;a href="http://www.springone2gx.com"&gt;SpringOne2GX in Washington, DC soon&lt;/a&gt;. Early Bird Price expires August 14th! It&amp;rsquo;s simply the best opportunity to find out first hand all that&amp;rsquo;s going on and to provide direct feedback.&lt;/p&gt;&lt;h1&gt;&lt;a href="#discounts" class="anchor" name="discounts"&gt;&lt;/a&gt;Discounts&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;The Early Bird price tier (June 13th - August 14th) is discounted $150.&lt;/li&gt;
  &lt;li&gt;Register 4 and get the 5th pass free. Contact us with the names of your first 4 registrants for your complimentary pass code (conference admission only).&lt;/li&gt;
  &lt;li&gt;Alumni, contact us for your discount code ($150 off any option).&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Happy coding!&lt;/p&gt;</content>
  </entry>
</feed>
